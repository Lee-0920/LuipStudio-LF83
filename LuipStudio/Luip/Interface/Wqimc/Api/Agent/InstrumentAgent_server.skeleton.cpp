// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "InstrumentAgent.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Interface::Wqimc::Api::Agent;

class InstrumentAgentHandler : virtual public InstrumentAgentIf {
 public:
  InstrumentAgentHandler() {
    // Your initialization goes here
  }

  void echo(std::string& _return, const std::string& data) {
    // Your implementation goes here
    printf("echo\n");
  }

  /**
   * @see 版本升级
   * 
   * @param type
   * @param newVersion
   * @param url
   */
  bool upgrade(const std::string& type, const std::string& newVersion, const std::string& url) {
    // Your implementation goes here
    printf("upgrade\n");
  }

  /**
   * @see 获取信号信息
   */
  void getSignals(std::vector<Signal> & _return) {
    // Your implementation goes here
    printf("getSignals\n");
  }

  /**
   * @see 设置信号更新周期
   * 
   * @param cycleSec
   */
  bool setSignalUpdateCycle(const double cycleSec) {
    // Your implementation goes here
    printf("setSignalUpdateCycle\n");
  }

  /**
   * @see 获取信号信息
   * 
   * @param configs
   */
  bool changeConfigs(const std::vector<Config> & configs) {
    // Your implementation goes here
    printf("changeConfigs\n");
  }

  /**
   * @see 更改仪器时间为指定时间
   * 
   * @param time
   */
  bool changeSystemTime(const int64_t time) {
    // Your implementation goes here
    printf("changeSystemTime\n");
  }

  /**
   * @see 回复出厂设置
   * 
   * @param roleType
   * @param profileName
   */
  bool restore(const RoleType::type roleType, const std::string& profileName) {
    // Your implementation goes here
    printf("restore\n");
  }

  /**
   * @see 重启仪器
   */
  bool reboot() {
    // Your implementation goes here
    printf("reboot\n");
  }

  /**
   * @see 操作仪器
   * 
   * @param op
   */
  bool execute(const Operation& op) {
    // Your implementation goes here
    printf("execute\n");
  }

  /**
   * @see 诊断
   * 
   * @param diags
   */
  bool diagnose(const std::vector<Diagnosis> & diags) {
    // Your implementation goes here
    printf("diagnose\n");
  }

  /**
   * @see 停止
   */
  bool stop() {
    // Your implementation goes here
    printf("stop\n");
  }

  /**
   * @see 修改仪器授权信息
   * 
   * @param authorization
   */
  bool setAuthorization(const Authorization& authorization) {
    // Your implementation goes here
    printf("setAuthorization\n");
  }

  /**
   * @see 校准触摸屏
   */
  bool calibrationTouchScreen() {
    // Your implementation goes here
    printf("calibrationTouchScreen\n");
  }

  /**
   * @see 恢复工厂模式
   */
  bool reintateFactorypattern() {
    // Your implementation goes here
    printf("reintateFactorypattern\n");
  }

  /**
   * @see 下发整合数据
   * 
   * @param data
   */
  bool updataMeasureData(const MeasureData& data) {
    // Your implementation goes here
    printf("updataMeasureData\n");
  }

  /**
   * @see 获取仪器日志文件列表
   */
  void getLogFileNames(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getLogFileNames\n");
  }

  /**
   * @see 获取仪器日志文件
   * 
   * @param logFileName
   * @param uploadPath
   */
  bool catchLogFile(const std::string& logFileName, const std::string& uploadPath) {
    // Your implementation goes here
    printf("catchLogFile\n");
  }

  /**
   * @see 进入目标文件夹
   * 
   * @param filePath
   */
  bool cdFoleder(const std::string& filePath) {
    // Your implementation goes here
    printf("cdFoleder\n");
  }

  /**
   * @see 获取目标文件夹文件列表
   * 
   * @param filePath
   * @param showHiddenFile
   */
  void getFileList(std::vector<InstrumentFile> & _return, const std::string& filePath, const bool showHiddenFile) {
    // Your implementation goes here
    printf("getFileList\n");
  }

  /**
   * @see 下载目标文件
   * 
   * @param filePath
   * @param uploadPath
   */
  bool downLoadInstrumentFile(const std::string& filePath, const std::string& uploadPath) {
    // Your implementation goes here
    printf("downLoadInstrumentFile\n");
  }

  /**
   * @see 删除目标文件
   * 
   * @param filePath
   */
  bool deleteInstrumentFile(const std::string& filePath) {
    // Your implementation goes here
    printf("deleteInstrumentFile\n");
  }

  /**
   * @see 上传文件到目标文件夹
   * 
   * @param filePath
   * @param url
   */
  bool uploadInstrumentFile(const std::string& filePath, const std::string& url) {
    // Your implementation goes here
    printf("uploadInstrumentFile\n");
  }

  /**
   * @see 新建文件夹到目标路径
   * 
   * @param filePath
   */
  bool addFolder(const std::string& filePath) {
    // Your implementation goes here
    printf("addFolder\n");
  }

  /**
   * 执行shell命令，返回结果字符串
   * 
   * @param command
   */
  void excuteCommand(std::string& _return, const std::string& command) {
    // Your implementation goes here
    printf("excuteCommand\n");
  }

  /**
   * @see 出厂模式
   */
  bool factorypattern() {
    // Your implementation goes here
    printf("factorypattern\n");
  }

  bool faultClearing() {
    // Your implementation goes here
    printf("faultClearing\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<InstrumentAgentHandler> handler(new InstrumentAgentHandler());
  shared_ptr<TProcessor> processor(new InstrumentAgentProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

