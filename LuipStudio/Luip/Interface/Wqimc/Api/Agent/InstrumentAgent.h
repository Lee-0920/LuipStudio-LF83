/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InstrumentAgent_H
#define InstrumentAgent_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "InstrumentAgent_types.h"

namespace Interface { namespace Wqimc { namespace Api { namespace Agent {

//#ifdef _WIN32
//  #pragma warning( push )
//  #pragma warning (disable : 4250 ) //inheriting methods via dominance
//#endif

class InstrumentAgentIf {
 public:
  virtual ~InstrumentAgentIf() {}
  virtual void echo(std::string& _return, const std::string& data) = 0;

  /**
   * @see 版本升级
   * 
   * @param type
   * @param newVersion
   * @param url
   */
  virtual bool upgrade(const std::string& type, const std::string& newVersion, const std::string& url) = 0;

  /**
   * @see 获取信号信息
   */
  virtual void getSignals(std::vector<Signal> & _return) = 0;

  /**
   * @see 设置信号更新周期
   * 
   * @param cycleSec
   */
  virtual bool setSignalUpdateCycle(const double cycleSec) = 0;

  /**
   * @see 获取信号信息
   * 
   * @param configs
   */
  virtual bool changeConfigs(const std::vector<Config> & configs) = 0;

  /**
   * @see 更改仪器时间为指定时间
   * 
   * @param time
   */
  virtual bool changeSystemTime(const int64_t time) = 0;

  /**
   * @see 回复出厂设置
   * 
   * @param roleType
   * @param profileName
   */
  virtual bool restore(const RoleType::type roleType, const std::string& profileName) = 0;

  /**
   * @see 重启仪器
   */
  virtual bool reboot() = 0;

  /**
   * @see 操作仪器
   * 
   * @param op
   */
  virtual bool execute(const Operation& op) = 0;

  /**
   * @see 诊断
   * 
   * @param diags
   */
  virtual bool diagnose(const std::vector<Diagnosis> & diags) = 0;

  /**
   * @see 停止
   */
  virtual bool stop() = 0;

  /**
   * @see 修改仪器授权信息
   * 
   * @param authorization
   */
  virtual bool setAuthorization(const Authorization& authorization) = 0;

  /**
   * @see 校准触摸屏
   */
  virtual bool calibrationTouchScreen() = 0;

  /**
   * @see 恢复工厂模式
   */
  virtual bool reintateFactorypattern() = 0;

  /**
   * @see 下发整合数据
   * 
   * @param data
   */
  virtual bool updataMeasureData(const MeasureData& data) = 0;

  /**
   * @see 获取仪器日志文件列表
   */
  virtual void getLogFileNames(std::vector<std::string> & _return) = 0;

  /**
   * @see 获取仪器日志文件
   * 
   * @param logFileName
   * @param uploadPath
   */
  virtual bool catchLogFile(const std::string& logFileName, const std::string& uploadPath) = 0;

  /**
   * @see 进入目标文件夹
   * 
   * @param filePath
   */
  virtual bool cdFoleder(const std::string& filePath) = 0;

  /**
   * @see 获取目标文件夹文件列表
   * 
   * @param filePath
   * @param showHiddenFile
   */
  virtual void getFileList(std::vector<InstrumentFile> & _return, const std::string& filePath, const bool showHiddenFile) = 0;

  /**
   * @see 下载目标文件
   * 
   * @param filePath
   * @param uploadPath
   */
  virtual bool downLoadInstrumentFile(const std::string& filePath, const std::string& uploadPath) = 0;

  /**
   * @see 删除目标文件
   * 
   * @param filePath
   */
  virtual bool deleteInstrumentFile(const std::string& filePath) = 0;

  /**
   * @see 上传文件到目标文件夹
   * 
   * @param filePath
   * @param url
   */
  virtual bool uploadInstrumentFile(const std::string& filePath, const std::string& url) = 0;

  /**
   * @see 新建文件夹到目标路径
   * 
   * @param filePath
   */
  virtual bool addFolder(const std::string& filePath) = 0;

  /**
   * 执行shell命令，返回结果字符串
   * 
   * @param command
   */
  virtual void excuteCommand(std::string& _return, const std::string& command) = 0;

  /**
   * @see 出厂模式
   */
  virtual bool factorypattern() = 0;
  virtual bool faultClearing() = 0;
};

class InstrumentAgentIfFactory {
 public:
  typedef InstrumentAgentIf Handler;

  virtual ~InstrumentAgentIfFactory() {}

  virtual InstrumentAgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InstrumentAgentIf* /* handler */) = 0;
};

class InstrumentAgentIfSingletonFactory : virtual public InstrumentAgentIfFactory {
 public:
  InstrumentAgentIfSingletonFactory(const boost::shared_ptr<InstrumentAgentIf>& iface) : iface_(iface) {}
  virtual ~InstrumentAgentIfSingletonFactory() {}

  virtual InstrumentAgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(InstrumentAgentIf* /* handler */) {}

 protected:
  boost::shared_ptr<InstrumentAgentIf> iface_;
};

class InstrumentAgentNull : virtual public InstrumentAgentIf {
 public:
  virtual ~InstrumentAgentNull() {}
  void echo(std::string& /* _return */, const std::string& /* data */) {
    return;
  }
  bool upgrade(const std::string& /* type */, const std::string& /* newVersion */, const std::string& /* url */) {
    bool _return = false;
    return _return;
  }
  void getSignals(std::vector<Signal> & /* _return */) {
    return;
  }
  bool setSignalUpdateCycle(const double /* cycleSec */) {
    bool _return = false;
    return _return;
  }
  bool changeConfigs(const std::vector<Config> & /* configs */) {
    bool _return = false;
    return _return;
  }
  bool changeSystemTime(const int64_t /* time */) {
    bool _return = false;
    return _return;
  }
  bool restore(const RoleType::type /* roleType */, const std::string& /* profileName */) {
    bool _return = false;
    return _return;
  }
  bool reboot() {
    bool _return = false;
    return _return;
  }
  bool execute(const Operation& /* op */) {
    bool _return = false;
    return _return;
  }
  bool diagnose(const std::vector<Diagnosis> & /* diags */) {
    bool _return = false;
    return _return;
  }
  bool stop() {
    bool _return = false;
    return _return;
  }
  bool setAuthorization(const Authorization& /* authorization */) {
    bool _return = false;
    return _return;
  }
  bool calibrationTouchScreen() {
    bool _return = false;
    return _return;
  }
  bool reintateFactorypattern() {
    bool _return = false;
    return _return;
  }
  bool updataMeasureData(const MeasureData& /* data */) {
    bool _return = false;
    return _return;
  }
  void getLogFileNames(std::vector<std::string> & /* _return */) {
    return;
  }
  bool catchLogFile(const std::string& /* logFileName */, const std::string& /* uploadPath */) {
    bool _return = false;
    return _return;
  }
  bool cdFoleder(const std::string& /* filePath */) {
    bool _return = false;
    return _return;
  }
  void getFileList(std::vector<InstrumentFile> & /* _return */, const std::string& /* filePath */, const bool /* showHiddenFile */) {
    return;
  }
  bool downLoadInstrumentFile(const std::string& /* filePath */, const std::string& /* uploadPath */) {
    bool _return = false;
    return _return;
  }
  bool deleteInstrumentFile(const std::string& /* filePath */) {
    bool _return = false;
    return _return;
  }
  bool uploadInstrumentFile(const std::string& /* filePath */, const std::string& /* url */) {
    bool _return = false;
    return _return;
  }
  bool addFolder(const std::string& /* filePath */) {
    bool _return = false;
    return _return;
  }
  void excuteCommand(std::string& /* _return */, const std::string& /* command */) {
    return;
  }
  bool factorypattern() {
    bool _return = false;
    return _return;
  }
  bool faultClearing() {
    bool _return = false;
    return _return;
  }
};

typedef struct _InstrumentAgent_echo_args__isset {
  _InstrumentAgent_echo_args__isset() : data(false) {}
  bool data :1;
} _InstrumentAgent_echo_args__isset;

class InstrumentAgent_echo_args {
 public:

  InstrumentAgent_echo_args(const InstrumentAgent_echo_args&);
  InstrumentAgent_echo_args& operator=(const InstrumentAgent_echo_args&);
  InstrumentAgent_echo_args() : data() {
  }

  virtual ~InstrumentAgent_echo_args() throw();
  std::string data;

  _InstrumentAgent_echo_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const InstrumentAgent_echo_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_echo_pargs {
 public:


  virtual ~InstrumentAgent_echo_pargs() throw();
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_echo_result__isset {
  _InstrumentAgent_echo_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_echo_result__isset;

class InstrumentAgent_echo_result {
 public:

  InstrumentAgent_echo_result(const InstrumentAgent_echo_result&);
  InstrumentAgent_echo_result& operator=(const InstrumentAgent_echo_result&);
  InstrumentAgent_echo_result() : success() {
  }

  virtual ~InstrumentAgent_echo_result() throw();
  std::string success;

  _InstrumentAgent_echo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const InstrumentAgent_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_echo_presult__isset {
  _InstrumentAgent_echo_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_echo_presult__isset;

class InstrumentAgent_echo_presult {
 public:


  virtual ~InstrumentAgent_echo_presult() throw();
  std::string* success;

  _InstrumentAgent_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_upgrade_args__isset {
  _InstrumentAgent_upgrade_args__isset() : type(false), newVersion(false), url(false) {}
  bool type :1;
  bool newVersion :1;
  bool url :1;
} _InstrumentAgent_upgrade_args__isset;

class InstrumentAgent_upgrade_args {
 public:

  InstrumentAgent_upgrade_args(const InstrumentAgent_upgrade_args&);
  InstrumentAgent_upgrade_args& operator=(const InstrumentAgent_upgrade_args&);
  InstrumentAgent_upgrade_args() : type(), newVersion(), url() {
  }

  virtual ~InstrumentAgent_upgrade_args() throw();
  std::string type;
  std::string newVersion;
  std::string url;

  _InstrumentAgent_upgrade_args__isset __isset;

  void __set_type(const std::string& val);

  void __set_newVersion(const std::string& val);

  void __set_url(const std::string& val);

  bool operator == (const InstrumentAgent_upgrade_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(newVersion == rhs.newVersion))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_upgrade_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_upgrade_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_upgrade_pargs {
 public:


  virtual ~InstrumentAgent_upgrade_pargs() throw();
  const std::string* type;
  const std::string* newVersion;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_upgrade_result__isset {
  _InstrumentAgent_upgrade_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_upgrade_result__isset;

class InstrumentAgent_upgrade_result {
 public:

  InstrumentAgent_upgrade_result(const InstrumentAgent_upgrade_result&);
  InstrumentAgent_upgrade_result& operator=(const InstrumentAgent_upgrade_result&);
  InstrumentAgent_upgrade_result() : success(0) {
  }

  virtual ~InstrumentAgent_upgrade_result() throw();
  bool success;

  _InstrumentAgent_upgrade_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_upgrade_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_upgrade_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_upgrade_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_upgrade_presult__isset {
  _InstrumentAgent_upgrade_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_upgrade_presult__isset;

class InstrumentAgent_upgrade_presult {
 public:


  virtual ~InstrumentAgent_upgrade_presult() throw();
  bool* success;

  _InstrumentAgent_upgrade_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentAgent_getSignals_args {
 public:

  InstrumentAgent_getSignals_args(const InstrumentAgent_getSignals_args&);
  InstrumentAgent_getSignals_args& operator=(const InstrumentAgent_getSignals_args&);
  InstrumentAgent_getSignals_args() {
  }

  virtual ~InstrumentAgent_getSignals_args() throw();

  bool operator == (const InstrumentAgent_getSignals_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentAgent_getSignals_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_getSignals_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_getSignals_pargs {
 public:


  virtual ~InstrumentAgent_getSignals_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_getSignals_result__isset {
  _InstrumentAgent_getSignals_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_getSignals_result__isset;

class InstrumentAgent_getSignals_result {
 public:

  InstrumentAgent_getSignals_result(const InstrumentAgent_getSignals_result&);
  InstrumentAgent_getSignals_result& operator=(const InstrumentAgent_getSignals_result&);
  InstrumentAgent_getSignals_result() {
  }

  virtual ~InstrumentAgent_getSignals_result() throw();
  std::vector<Signal>  success;

  _InstrumentAgent_getSignals_result__isset __isset;

  void __set_success(const std::vector<Signal> & val);

  bool operator == (const InstrumentAgent_getSignals_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_getSignals_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_getSignals_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_getSignals_presult__isset {
  _InstrumentAgent_getSignals_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_getSignals_presult__isset;

class InstrumentAgent_getSignals_presult {
 public:


  virtual ~InstrumentAgent_getSignals_presult() throw();
  std::vector<Signal> * success;

  _InstrumentAgent_getSignals_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_setSignalUpdateCycle_args__isset {
  _InstrumentAgent_setSignalUpdateCycle_args__isset() : cycleSec(false) {}
  bool cycleSec :1;
} _InstrumentAgent_setSignalUpdateCycle_args__isset;

class InstrumentAgent_setSignalUpdateCycle_args {
 public:

  InstrumentAgent_setSignalUpdateCycle_args(const InstrumentAgent_setSignalUpdateCycle_args&);
  InstrumentAgent_setSignalUpdateCycle_args& operator=(const InstrumentAgent_setSignalUpdateCycle_args&);
  InstrumentAgent_setSignalUpdateCycle_args() : cycleSec(0) {
  }

  virtual ~InstrumentAgent_setSignalUpdateCycle_args() throw();
  double cycleSec;

  _InstrumentAgent_setSignalUpdateCycle_args__isset __isset;

  void __set_cycleSec(const double val);

  bool operator == (const InstrumentAgent_setSignalUpdateCycle_args & rhs) const
  {
    if (!(cycleSec == rhs.cycleSec))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_setSignalUpdateCycle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_setSignalUpdateCycle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_setSignalUpdateCycle_pargs {
 public:


  virtual ~InstrumentAgent_setSignalUpdateCycle_pargs() throw();
  const double* cycleSec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_setSignalUpdateCycle_result__isset {
  _InstrumentAgent_setSignalUpdateCycle_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_setSignalUpdateCycle_result__isset;

class InstrumentAgent_setSignalUpdateCycle_result {
 public:

  InstrumentAgent_setSignalUpdateCycle_result(const InstrumentAgent_setSignalUpdateCycle_result&);
  InstrumentAgent_setSignalUpdateCycle_result& operator=(const InstrumentAgent_setSignalUpdateCycle_result&);
  InstrumentAgent_setSignalUpdateCycle_result() : success(0) {
  }

  virtual ~InstrumentAgent_setSignalUpdateCycle_result() throw();
  bool success;

  _InstrumentAgent_setSignalUpdateCycle_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_setSignalUpdateCycle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_setSignalUpdateCycle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_setSignalUpdateCycle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_setSignalUpdateCycle_presult__isset {
  _InstrumentAgent_setSignalUpdateCycle_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_setSignalUpdateCycle_presult__isset;

class InstrumentAgent_setSignalUpdateCycle_presult {
 public:


  virtual ~InstrumentAgent_setSignalUpdateCycle_presult() throw();
  bool* success;

  _InstrumentAgent_setSignalUpdateCycle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_changeConfigs_args__isset {
  _InstrumentAgent_changeConfigs_args__isset() : configs(false) {}
  bool configs :1;
} _InstrumentAgent_changeConfigs_args__isset;

class InstrumentAgent_changeConfigs_args {
 public:

  InstrumentAgent_changeConfigs_args(const InstrumentAgent_changeConfigs_args&);
  InstrumentAgent_changeConfigs_args& operator=(const InstrumentAgent_changeConfigs_args&);
  InstrumentAgent_changeConfigs_args() {
  }

  virtual ~InstrumentAgent_changeConfigs_args() throw();
  std::vector<Config>  configs;

  _InstrumentAgent_changeConfigs_args__isset __isset;

  void __set_configs(const std::vector<Config> & val);

  bool operator == (const InstrumentAgent_changeConfigs_args & rhs) const
  {
    if (!(configs == rhs.configs))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_changeConfigs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_changeConfigs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_changeConfigs_pargs {
 public:


  virtual ~InstrumentAgent_changeConfigs_pargs() throw();
  const std::vector<Config> * configs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_changeConfigs_result__isset {
  _InstrumentAgent_changeConfigs_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_changeConfigs_result__isset;

class InstrumentAgent_changeConfigs_result {
 public:

  InstrumentAgent_changeConfigs_result(const InstrumentAgent_changeConfigs_result&);
  InstrumentAgent_changeConfigs_result& operator=(const InstrumentAgent_changeConfigs_result&);
  InstrumentAgent_changeConfigs_result() : success(0) {
  }

  virtual ~InstrumentAgent_changeConfigs_result() throw();
  bool success;

  _InstrumentAgent_changeConfigs_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_changeConfigs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_changeConfigs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_changeConfigs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_changeConfigs_presult__isset {
  _InstrumentAgent_changeConfigs_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_changeConfigs_presult__isset;

class InstrumentAgent_changeConfigs_presult {
 public:


  virtual ~InstrumentAgent_changeConfigs_presult() throw();
  bool* success;

  _InstrumentAgent_changeConfigs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_changeSystemTime_args__isset {
  _InstrumentAgent_changeSystemTime_args__isset() : time(false) {}
  bool time :1;
} _InstrumentAgent_changeSystemTime_args__isset;

class InstrumentAgent_changeSystemTime_args {
 public:

  InstrumentAgent_changeSystemTime_args(const InstrumentAgent_changeSystemTime_args&);
  InstrumentAgent_changeSystemTime_args& operator=(const InstrumentAgent_changeSystemTime_args&);
  InstrumentAgent_changeSystemTime_args() : time(0) {
  }

  virtual ~InstrumentAgent_changeSystemTime_args() throw();
  int64_t time;

  _InstrumentAgent_changeSystemTime_args__isset __isset;

  void __set_time(const int64_t val);

  bool operator == (const InstrumentAgent_changeSystemTime_args & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_changeSystemTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_changeSystemTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_changeSystemTime_pargs {
 public:


  virtual ~InstrumentAgent_changeSystemTime_pargs() throw();
  const int64_t* time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_changeSystemTime_result__isset {
  _InstrumentAgent_changeSystemTime_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_changeSystemTime_result__isset;

class InstrumentAgent_changeSystemTime_result {
 public:

  InstrumentAgent_changeSystemTime_result(const InstrumentAgent_changeSystemTime_result&);
  InstrumentAgent_changeSystemTime_result& operator=(const InstrumentAgent_changeSystemTime_result&);
  InstrumentAgent_changeSystemTime_result() : success(0) {
  }

  virtual ~InstrumentAgent_changeSystemTime_result() throw();
  bool success;

  _InstrumentAgent_changeSystemTime_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_changeSystemTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_changeSystemTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_changeSystemTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_changeSystemTime_presult__isset {
  _InstrumentAgent_changeSystemTime_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_changeSystemTime_presult__isset;

class InstrumentAgent_changeSystemTime_presult {
 public:


  virtual ~InstrumentAgent_changeSystemTime_presult() throw();
  bool* success;

  _InstrumentAgent_changeSystemTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_restore_args__isset {
  _InstrumentAgent_restore_args__isset() : roleType(false), profileName(false) {}
  bool roleType :1;
  bool profileName :1;
} _InstrumentAgent_restore_args__isset;

class InstrumentAgent_restore_args {
 public:

  InstrumentAgent_restore_args(const InstrumentAgent_restore_args&);
  InstrumentAgent_restore_args& operator=(const InstrumentAgent_restore_args&);
  InstrumentAgent_restore_args() : roleType((RoleType::type)0), profileName() {
  }

  virtual ~InstrumentAgent_restore_args() throw();
  RoleType::type roleType;
  std::string profileName;

  _InstrumentAgent_restore_args__isset __isset;

  void __set_roleType(const RoleType::type val);

  void __set_profileName(const std::string& val);

  bool operator == (const InstrumentAgent_restore_args & rhs) const
  {
    if (!(roleType == rhs.roleType))
      return false;
    if (!(profileName == rhs.profileName))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_restore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_restore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_restore_pargs {
 public:


  virtual ~InstrumentAgent_restore_pargs() throw();
  const RoleType::type* roleType;
  const std::string* profileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_restore_result__isset {
  _InstrumentAgent_restore_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_restore_result__isset;

class InstrumentAgent_restore_result {
 public:

  InstrumentAgent_restore_result(const InstrumentAgent_restore_result&);
  InstrumentAgent_restore_result& operator=(const InstrumentAgent_restore_result&);
  InstrumentAgent_restore_result() : success(0) {
  }

  virtual ~InstrumentAgent_restore_result() throw();
  bool success;

  _InstrumentAgent_restore_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_restore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_restore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_restore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_restore_presult__isset {
  _InstrumentAgent_restore_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_restore_presult__isset;

class InstrumentAgent_restore_presult {
 public:


  virtual ~InstrumentAgent_restore_presult() throw();
  bool* success;

  _InstrumentAgent_restore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentAgent_reboot_args {
 public:

  InstrumentAgent_reboot_args(const InstrumentAgent_reboot_args&);
  InstrumentAgent_reboot_args& operator=(const InstrumentAgent_reboot_args&);
  InstrumentAgent_reboot_args() {
  }

  virtual ~InstrumentAgent_reboot_args() throw();

  bool operator == (const InstrumentAgent_reboot_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentAgent_reboot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_reboot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_reboot_pargs {
 public:


  virtual ~InstrumentAgent_reboot_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_reboot_result__isset {
  _InstrumentAgent_reboot_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_reboot_result__isset;

class InstrumentAgent_reboot_result {
 public:

  InstrumentAgent_reboot_result(const InstrumentAgent_reboot_result&);
  InstrumentAgent_reboot_result& operator=(const InstrumentAgent_reboot_result&);
  InstrumentAgent_reboot_result() : success(0) {
  }

  virtual ~InstrumentAgent_reboot_result() throw();
  bool success;

  _InstrumentAgent_reboot_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_reboot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_reboot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_reboot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_reboot_presult__isset {
  _InstrumentAgent_reboot_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_reboot_presult__isset;

class InstrumentAgent_reboot_presult {
 public:


  virtual ~InstrumentAgent_reboot_presult() throw();
  bool* success;

  _InstrumentAgent_reboot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_execute_args__isset {
  _InstrumentAgent_execute_args__isset() : op(false) {}
  bool op :1;
} _InstrumentAgent_execute_args__isset;

class InstrumentAgent_execute_args {
 public:

  InstrumentAgent_execute_args(const InstrumentAgent_execute_args&);
  InstrumentAgent_execute_args& operator=(const InstrumentAgent_execute_args&);
  InstrumentAgent_execute_args() {
  }

  virtual ~InstrumentAgent_execute_args() throw();
  Operation op;

  _InstrumentAgent_execute_args__isset __isset;

  void __set_op(const Operation& val);

  bool operator == (const InstrumentAgent_execute_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_execute_pargs {
 public:


  virtual ~InstrumentAgent_execute_pargs() throw();
  const Operation* op;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_execute_result__isset {
  _InstrumentAgent_execute_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_execute_result__isset;

class InstrumentAgent_execute_result {
 public:

  InstrumentAgent_execute_result(const InstrumentAgent_execute_result&);
  InstrumentAgent_execute_result& operator=(const InstrumentAgent_execute_result&);
  InstrumentAgent_execute_result() : success(0) {
  }

  virtual ~InstrumentAgent_execute_result() throw();
  bool success;

  _InstrumentAgent_execute_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_execute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_execute_presult__isset {
  _InstrumentAgent_execute_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_execute_presult__isset;

class InstrumentAgent_execute_presult {
 public:


  virtual ~InstrumentAgent_execute_presult() throw();
  bool* success;

  _InstrumentAgent_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_diagnose_args__isset {
  _InstrumentAgent_diagnose_args__isset() : diags(false) {}
  bool diags :1;
} _InstrumentAgent_diagnose_args__isset;

class InstrumentAgent_diagnose_args {
 public:

  InstrumentAgent_diagnose_args(const InstrumentAgent_diagnose_args&);
  InstrumentAgent_diagnose_args& operator=(const InstrumentAgent_diagnose_args&);
  InstrumentAgent_diagnose_args() {
  }

  virtual ~InstrumentAgent_diagnose_args() throw();
  std::vector<Diagnosis>  diags;

  _InstrumentAgent_diagnose_args__isset __isset;

  void __set_diags(const std::vector<Diagnosis> & val);

  bool operator == (const InstrumentAgent_diagnose_args & rhs) const
  {
    if (!(diags == rhs.diags))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_diagnose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_diagnose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_diagnose_pargs {
 public:


  virtual ~InstrumentAgent_diagnose_pargs() throw();
  const std::vector<Diagnosis> * diags;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_diagnose_result__isset {
  _InstrumentAgent_diagnose_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_diagnose_result__isset;

class InstrumentAgent_diagnose_result {
 public:

  InstrumentAgent_diagnose_result(const InstrumentAgent_diagnose_result&);
  InstrumentAgent_diagnose_result& operator=(const InstrumentAgent_diagnose_result&);
  InstrumentAgent_diagnose_result() : success(0) {
  }

  virtual ~InstrumentAgent_diagnose_result() throw();
  bool success;

  _InstrumentAgent_diagnose_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_diagnose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_diagnose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_diagnose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_diagnose_presult__isset {
  _InstrumentAgent_diagnose_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_diagnose_presult__isset;

class InstrumentAgent_diagnose_presult {
 public:


  virtual ~InstrumentAgent_diagnose_presult() throw();
  bool* success;

  _InstrumentAgent_diagnose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentAgent_stop_args {
 public:

  InstrumentAgent_stop_args(const InstrumentAgent_stop_args&);
  InstrumentAgent_stop_args& operator=(const InstrumentAgent_stop_args&);
  InstrumentAgent_stop_args() {
  }

  virtual ~InstrumentAgent_stop_args() throw();

  bool operator == (const InstrumentAgent_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentAgent_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_stop_pargs {
 public:


  virtual ~InstrumentAgent_stop_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_stop_result__isset {
  _InstrumentAgent_stop_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_stop_result__isset;

class InstrumentAgent_stop_result {
 public:

  InstrumentAgent_stop_result(const InstrumentAgent_stop_result&);
  InstrumentAgent_stop_result& operator=(const InstrumentAgent_stop_result&);
  InstrumentAgent_stop_result() : success(0) {
  }

  virtual ~InstrumentAgent_stop_result() throw();
  bool success;

  _InstrumentAgent_stop_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_stop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_stop_presult__isset {
  _InstrumentAgent_stop_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_stop_presult__isset;

class InstrumentAgent_stop_presult {
 public:


  virtual ~InstrumentAgent_stop_presult() throw();
  bool* success;

  _InstrumentAgent_stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_setAuthorization_args__isset {
  _InstrumentAgent_setAuthorization_args__isset() : authorization(false) {}
  bool authorization :1;
} _InstrumentAgent_setAuthorization_args__isset;

class InstrumentAgent_setAuthorization_args {
 public:

  InstrumentAgent_setAuthorization_args(const InstrumentAgent_setAuthorization_args&);
  InstrumentAgent_setAuthorization_args& operator=(const InstrumentAgent_setAuthorization_args&);
  InstrumentAgent_setAuthorization_args() {
  }

  virtual ~InstrumentAgent_setAuthorization_args() throw();
  Authorization authorization;

  _InstrumentAgent_setAuthorization_args__isset __isset;

  void __set_authorization(const Authorization& val);

  bool operator == (const InstrumentAgent_setAuthorization_args & rhs) const
  {
    if (!(authorization == rhs.authorization))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_setAuthorization_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_setAuthorization_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_setAuthorization_pargs {
 public:


  virtual ~InstrumentAgent_setAuthorization_pargs() throw();
  const Authorization* authorization;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_setAuthorization_result__isset {
  _InstrumentAgent_setAuthorization_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_setAuthorization_result__isset;

class InstrumentAgent_setAuthorization_result {
 public:

  InstrumentAgent_setAuthorization_result(const InstrumentAgent_setAuthorization_result&);
  InstrumentAgent_setAuthorization_result& operator=(const InstrumentAgent_setAuthorization_result&);
  InstrumentAgent_setAuthorization_result() : success(0) {
  }

  virtual ~InstrumentAgent_setAuthorization_result() throw();
  bool success;

  _InstrumentAgent_setAuthorization_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_setAuthorization_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_setAuthorization_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_setAuthorization_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_setAuthorization_presult__isset {
  _InstrumentAgent_setAuthorization_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_setAuthorization_presult__isset;

class InstrumentAgent_setAuthorization_presult {
 public:


  virtual ~InstrumentAgent_setAuthorization_presult() throw();
  bool* success;

  _InstrumentAgent_setAuthorization_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentAgent_calibrationTouchScreen_args {
 public:

  InstrumentAgent_calibrationTouchScreen_args(const InstrumentAgent_calibrationTouchScreen_args&);
  InstrumentAgent_calibrationTouchScreen_args& operator=(const InstrumentAgent_calibrationTouchScreen_args&);
  InstrumentAgent_calibrationTouchScreen_args() {
  }

  virtual ~InstrumentAgent_calibrationTouchScreen_args() throw();

  bool operator == (const InstrumentAgent_calibrationTouchScreen_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentAgent_calibrationTouchScreen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_calibrationTouchScreen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_calibrationTouchScreen_pargs {
 public:


  virtual ~InstrumentAgent_calibrationTouchScreen_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_calibrationTouchScreen_result__isset {
  _InstrumentAgent_calibrationTouchScreen_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_calibrationTouchScreen_result__isset;

class InstrumentAgent_calibrationTouchScreen_result {
 public:

  InstrumentAgent_calibrationTouchScreen_result(const InstrumentAgent_calibrationTouchScreen_result&);
  InstrumentAgent_calibrationTouchScreen_result& operator=(const InstrumentAgent_calibrationTouchScreen_result&);
  InstrumentAgent_calibrationTouchScreen_result() : success(0) {
  }

  virtual ~InstrumentAgent_calibrationTouchScreen_result() throw();
  bool success;

  _InstrumentAgent_calibrationTouchScreen_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_calibrationTouchScreen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_calibrationTouchScreen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_calibrationTouchScreen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_calibrationTouchScreen_presult__isset {
  _InstrumentAgent_calibrationTouchScreen_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_calibrationTouchScreen_presult__isset;

class InstrumentAgent_calibrationTouchScreen_presult {
 public:


  virtual ~InstrumentAgent_calibrationTouchScreen_presult() throw();
  bool* success;

  _InstrumentAgent_calibrationTouchScreen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentAgent_reintateFactorypattern_args {
 public:

  InstrumentAgent_reintateFactorypattern_args(const InstrumentAgent_reintateFactorypattern_args&);
  InstrumentAgent_reintateFactorypattern_args& operator=(const InstrumentAgent_reintateFactorypattern_args&);
  InstrumentAgent_reintateFactorypattern_args() {
  }

  virtual ~InstrumentAgent_reintateFactorypattern_args() throw();

  bool operator == (const InstrumentAgent_reintateFactorypattern_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentAgent_reintateFactorypattern_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_reintateFactorypattern_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_reintateFactorypattern_pargs {
 public:


  virtual ~InstrumentAgent_reintateFactorypattern_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_reintateFactorypattern_result__isset {
  _InstrumentAgent_reintateFactorypattern_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_reintateFactorypattern_result__isset;

class InstrumentAgent_reintateFactorypattern_result {
 public:

  InstrumentAgent_reintateFactorypattern_result(const InstrumentAgent_reintateFactorypattern_result&);
  InstrumentAgent_reintateFactorypattern_result& operator=(const InstrumentAgent_reintateFactorypattern_result&);
  InstrumentAgent_reintateFactorypattern_result() : success(0) {
  }

  virtual ~InstrumentAgent_reintateFactorypattern_result() throw();
  bool success;

  _InstrumentAgent_reintateFactorypattern_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_reintateFactorypattern_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_reintateFactorypattern_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_reintateFactorypattern_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_reintateFactorypattern_presult__isset {
  _InstrumentAgent_reintateFactorypattern_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_reintateFactorypattern_presult__isset;

class InstrumentAgent_reintateFactorypattern_presult {
 public:


  virtual ~InstrumentAgent_reintateFactorypattern_presult() throw();
  bool* success;

  _InstrumentAgent_reintateFactorypattern_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_updataMeasureData_args__isset {
  _InstrumentAgent_updataMeasureData_args__isset() : data(false) {}
  bool data :1;
} _InstrumentAgent_updataMeasureData_args__isset;

class InstrumentAgent_updataMeasureData_args {
 public:

  InstrumentAgent_updataMeasureData_args(const InstrumentAgent_updataMeasureData_args&);
  InstrumentAgent_updataMeasureData_args& operator=(const InstrumentAgent_updataMeasureData_args&);
  InstrumentAgent_updataMeasureData_args() {
  }

  virtual ~InstrumentAgent_updataMeasureData_args() throw();
  MeasureData data;

  _InstrumentAgent_updataMeasureData_args__isset __isset;

  void __set_data(const MeasureData& val);

  bool operator == (const InstrumentAgent_updataMeasureData_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_updataMeasureData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_updataMeasureData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_updataMeasureData_pargs {
 public:


  virtual ~InstrumentAgent_updataMeasureData_pargs() throw();
  const MeasureData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_updataMeasureData_result__isset {
  _InstrumentAgent_updataMeasureData_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_updataMeasureData_result__isset;

class InstrumentAgent_updataMeasureData_result {
 public:

  InstrumentAgent_updataMeasureData_result(const InstrumentAgent_updataMeasureData_result&);
  InstrumentAgent_updataMeasureData_result& operator=(const InstrumentAgent_updataMeasureData_result&);
  InstrumentAgent_updataMeasureData_result() : success(0) {
  }

  virtual ~InstrumentAgent_updataMeasureData_result() throw();
  bool success;

  _InstrumentAgent_updataMeasureData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_updataMeasureData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_updataMeasureData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_updataMeasureData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_updataMeasureData_presult__isset {
  _InstrumentAgent_updataMeasureData_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_updataMeasureData_presult__isset;

class InstrumentAgent_updataMeasureData_presult {
 public:


  virtual ~InstrumentAgent_updataMeasureData_presult() throw();
  bool* success;

  _InstrumentAgent_updataMeasureData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentAgent_getLogFileNames_args {
 public:

  InstrumentAgent_getLogFileNames_args(const InstrumentAgent_getLogFileNames_args&);
  InstrumentAgent_getLogFileNames_args& operator=(const InstrumentAgent_getLogFileNames_args&);
  InstrumentAgent_getLogFileNames_args() {
  }

  virtual ~InstrumentAgent_getLogFileNames_args() throw();

  bool operator == (const InstrumentAgent_getLogFileNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentAgent_getLogFileNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_getLogFileNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_getLogFileNames_pargs {
 public:


  virtual ~InstrumentAgent_getLogFileNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_getLogFileNames_result__isset {
  _InstrumentAgent_getLogFileNames_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_getLogFileNames_result__isset;

class InstrumentAgent_getLogFileNames_result {
 public:

  InstrumentAgent_getLogFileNames_result(const InstrumentAgent_getLogFileNames_result&);
  InstrumentAgent_getLogFileNames_result& operator=(const InstrumentAgent_getLogFileNames_result&);
  InstrumentAgent_getLogFileNames_result() {
  }

  virtual ~InstrumentAgent_getLogFileNames_result() throw();
  std::vector<std::string>  success;

  _InstrumentAgent_getLogFileNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const InstrumentAgent_getLogFileNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_getLogFileNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_getLogFileNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_getLogFileNames_presult__isset {
  _InstrumentAgent_getLogFileNames_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_getLogFileNames_presult__isset;

class InstrumentAgent_getLogFileNames_presult {
 public:


  virtual ~InstrumentAgent_getLogFileNames_presult() throw();
  std::vector<std::string> * success;

  _InstrumentAgent_getLogFileNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_catchLogFile_args__isset {
  _InstrumentAgent_catchLogFile_args__isset() : logFileName(false), uploadPath(false) {}
  bool logFileName :1;
  bool uploadPath :1;
} _InstrumentAgent_catchLogFile_args__isset;

class InstrumentAgent_catchLogFile_args {
 public:

  InstrumentAgent_catchLogFile_args(const InstrumentAgent_catchLogFile_args&);
  InstrumentAgent_catchLogFile_args& operator=(const InstrumentAgent_catchLogFile_args&);
  InstrumentAgent_catchLogFile_args() : logFileName(), uploadPath() {
  }

  virtual ~InstrumentAgent_catchLogFile_args() throw();
  std::string logFileName;
  std::string uploadPath;

  _InstrumentAgent_catchLogFile_args__isset __isset;

  void __set_logFileName(const std::string& val);

  void __set_uploadPath(const std::string& val);

  bool operator == (const InstrumentAgent_catchLogFile_args & rhs) const
  {
    if (!(logFileName == rhs.logFileName))
      return false;
    if (!(uploadPath == rhs.uploadPath))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_catchLogFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_catchLogFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_catchLogFile_pargs {
 public:


  virtual ~InstrumentAgent_catchLogFile_pargs() throw();
  const std::string* logFileName;
  const std::string* uploadPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_catchLogFile_result__isset {
  _InstrumentAgent_catchLogFile_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_catchLogFile_result__isset;

class InstrumentAgent_catchLogFile_result {
 public:

  InstrumentAgent_catchLogFile_result(const InstrumentAgent_catchLogFile_result&);
  InstrumentAgent_catchLogFile_result& operator=(const InstrumentAgent_catchLogFile_result&);
  InstrumentAgent_catchLogFile_result() : success(0) {
  }

  virtual ~InstrumentAgent_catchLogFile_result() throw();
  bool success;

  _InstrumentAgent_catchLogFile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_catchLogFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_catchLogFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_catchLogFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_catchLogFile_presult__isset {
  _InstrumentAgent_catchLogFile_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_catchLogFile_presult__isset;

class InstrumentAgent_catchLogFile_presult {
 public:


  virtual ~InstrumentAgent_catchLogFile_presult() throw();
  bool* success;

  _InstrumentAgent_catchLogFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_cdFoleder_args__isset {
  _InstrumentAgent_cdFoleder_args__isset() : filePath(false) {}
  bool filePath :1;
} _InstrumentAgent_cdFoleder_args__isset;

class InstrumentAgent_cdFoleder_args {
 public:

  InstrumentAgent_cdFoleder_args(const InstrumentAgent_cdFoleder_args&);
  InstrumentAgent_cdFoleder_args& operator=(const InstrumentAgent_cdFoleder_args&);
  InstrumentAgent_cdFoleder_args() : filePath() {
  }

  virtual ~InstrumentAgent_cdFoleder_args() throw();
  std::string filePath;

  _InstrumentAgent_cdFoleder_args__isset __isset;

  void __set_filePath(const std::string& val);

  bool operator == (const InstrumentAgent_cdFoleder_args & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_cdFoleder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_cdFoleder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_cdFoleder_pargs {
 public:


  virtual ~InstrumentAgent_cdFoleder_pargs() throw();
  const std::string* filePath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_cdFoleder_result__isset {
  _InstrumentAgent_cdFoleder_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_cdFoleder_result__isset;

class InstrumentAgent_cdFoleder_result {
 public:

  InstrumentAgent_cdFoleder_result(const InstrumentAgent_cdFoleder_result&);
  InstrumentAgent_cdFoleder_result& operator=(const InstrumentAgent_cdFoleder_result&);
  InstrumentAgent_cdFoleder_result() : success(0) {
  }

  virtual ~InstrumentAgent_cdFoleder_result() throw();
  bool success;

  _InstrumentAgent_cdFoleder_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_cdFoleder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_cdFoleder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_cdFoleder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_cdFoleder_presult__isset {
  _InstrumentAgent_cdFoleder_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_cdFoleder_presult__isset;

class InstrumentAgent_cdFoleder_presult {
 public:


  virtual ~InstrumentAgent_cdFoleder_presult() throw();
  bool* success;

  _InstrumentAgent_cdFoleder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_getFileList_args__isset {
  _InstrumentAgent_getFileList_args__isset() : filePath(false), showHiddenFile(false) {}
  bool filePath :1;
  bool showHiddenFile :1;
} _InstrumentAgent_getFileList_args__isset;

class InstrumentAgent_getFileList_args {
 public:

  InstrumentAgent_getFileList_args(const InstrumentAgent_getFileList_args&);
  InstrumentAgent_getFileList_args& operator=(const InstrumentAgent_getFileList_args&);
  InstrumentAgent_getFileList_args() : filePath(), showHiddenFile(0) {
  }

  virtual ~InstrumentAgent_getFileList_args() throw();
  std::string filePath;
  bool showHiddenFile;

  _InstrumentAgent_getFileList_args__isset __isset;

  void __set_filePath(const std::string& val);

  void __set_showHiddenFile(const bool val);

  bool operator == (const InstrumentAgent_getFileList_args & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    if (!(showHiddenFile == rhs.showHiddenFile))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_getFileList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_getFileList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_getFileList_pargs {
 public:


  virtual ~InstrumentAgent_getFileList_pargs() throw();
  const std::string* filePath;
  const bool* showHiddenFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_getFileList_result__isset {
  _InstrumentAgent_getFileList_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_getFileList_result__isset;

class InstrumentAgent_getFileList_result {
 public:

  InstrumentAgent_getFileList_result(const InstrumentAgent_getFileList_result&);
  InstrumentAgent_getFileList_result& operator=(const InstrumentAgent_getFileList_result&);
  InstrumentAgent_getFileList_result() {
  }

  virtual ~InstrumentAgent_getFileList_result() throw();
  std::vector<InstrumentFile>  success;

  _InstrumentAgent_getFileList_result__isset __isset;

  void __set_success(const std::vector<InstrumentFile> & val);

  bool operator == (const InstrumentAgent_getFileList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_getFileList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_getFileList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_getFileList_presult__isset {
  _InstrumentAgent_getFileList_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_getFileList_presult__isset;

class InstrumentAgent_getFileList_presult {
 public:


  virtual ~InstrumentAgent_getFileList_presult() throw();
  std::vector<InstrumentFile> * success;

  _InstrumentAgent_getFileList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_downLoadInstrumentFile_args__isset {
  _InstrumentAgent_downLoadInstrumentFile_args__isset() : filePath(false), uploadPath(false) {}
  bool filePath :1;
  bool uploadPath :1;
} _InstrumentAgent_downLoadInstrumentFile_args__isset;

class InstrumentAgent_downLoadInstrumentFile_args {
 public:

  InstrumentAgent_downLoadInstrumentFile_args(const InstrumentAgent_downLoadInstrumentFile_args&);
  InstrumentAgent_downLoadInstrumentFile_args& operator=(const InstrumentAgent_downLoadInstrumentFile_args&);
  InstrumentAgent_downLoadInstrumentFile_args() : filePath(), uploadPath() {
  }

  virtual ~InstrumentAgent_downLoadInstrumentFile_args() throw();
  std::string filePath;
  std::string uploadPath;

  _InstrumentAgent_downLoadInstrumentFile_args__isset __isset;

  void __set_filePath(const std::string& val);

  void __set_uploadPath(const std::string& val);

  bool operator == (const InstrumentAgent_downLoadInstrumentFile_args & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    if (!(uploadPath == rhs.uploadPath))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_downLoadInstrumentFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_downLoadInstrumentFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_downLoadInstrumentFile_pargs {
 public:


  virtual ~InstrumentAgent_downLoadInstrumentFile_pargs() throw();
  const std::string* filePath;
  const std::string* uploadPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_downLoadInstrumentFile_result__isset {
  _InstrumentAgent_downLoadInstrumentFile_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_downLoadInstrumentFile_result__isset;

class InstrumentAgent_downLoadInstrumentFile_result {
 public:

  InstrumentAgent_downLoadInstrumentFile_result(const InstrumentAgent_downLoadInstrumentFile_result&);
  InstrumentAgent_downLoadInstrumentFile_result& operator=(const InstrumentAgent_downLoadInstrumentFile_result&);
  InstrumentAgent_downLoadInstrumentFile_result() : success(0) {
  }

  virtual ~InstrumentAgent_downLoadInstrumentFile_result() throw();
  bool success;

  _InstrumentAgent_downLoadInstrumentFile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_downLoadInstrumentFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_downLoadInstrumentFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_downLoadInstrumentFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_downLoadInstrumentFile_presult__isset {
  _InstrumentAgent_downLoadInstrumentFile_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_downLoadInstrumentFile_presult__isset;

class InstrumentAgent_downLoadInstrumentFile_presult {
 public:


  virtual ~InstrumentAgent_downLoadInstrumentFile_presult() throw();
  bool* success;

  _InstrumentAgent_downLoadInstrumentFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_deleteInstrumentFile_args__isset {
  _InstrumentAgent_deleteInstrumentFile_args__isset() : filePath(false) {}
  bool filePath :1;
} _InstrumentAgent_deleteInstrumentFile_args__isset;

class InstrumentAgent_deleteInstrumentFile_args {
 public:

  InstrumentAgent_deleteInstrumentFile_args(const InstrumentAgent_deleteInstrumentFile_args&);
  InstrumentAgent_deleteInstrumentFile_args& operator=(const InstrumentAgent_deleteInstrumentFile_args&);
  InstrumentAgent_deleteInstrumentFile_args() : filePath() {
  }

  virtual ~InstrumentAgent_deleteInstrumentFile_args() throw();
  std::string filePath;

  _InstrumentAgent_deleteInstrumentFile_args__isset __isset;

  void __set_filePath(const std::string& val);

  bool operator == (const InstrumentAgent_deleteInstrumentFile_args & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_deleteInstrumentFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_deleteInstrumentFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_deleteInstrumentFile_pargs {
 public:


  virtual ~InstrumentAgent_deleteInstrumentFile_pargs() throw();
  const std::string* filePath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_deleteInstrumentFile_result__isset {
  _InstrumentAgent_deleteInstrumentFile_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_deleteInstrumentFile_result__isset;

class InstrumentAgent_deleteInstrumentFile_result {
 public:

  InstrumentAgent_deleteInstrumentFile_result(const InstrumentAgent_deleteInstrumentFile_result&);
  InstrumentAgent_deleteInstrumentFile_result& operator=(const InstrumentAgent_deleteInstrumentFile_result&);
  InstrumentAgent_deleteInstrumentFile_result() : success(0) {
  }

  virtual ~InstrumentAgent_deleteInstrumentFile_result() throw();
  bool success;

  _InstrumentAgent_deleteInstrumentFile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_deleteInstrumentFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_deleteInstrumentFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_deleteInstrumentFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_deleteInstrumentFile_presult__isset {
  _InstrumentAgent_deleteInstrumentFile_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_deleteInstrumentFile_presult__isset;

class InstrumentAgent_deleteInstrumentFile_presult {
 public:


  virtual ~InstrumentAgent_deleteInstrumentFile_presult() throw();
  bool* success;

  _InstrumentAgent_deleteInstrumentFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_uploadInstrumentFile_args__isset {
  _InstrumentAgent_uploadInstrumentFile_args__isset() : filePath(false), url(false) {}
  bool filePath :1;
  bool url :1;
} _InstrumentAgent_uploadInstrumentFile_args__isset;

class InstrumentAgent_uploadInstrumentFile_args {
 public:

  InstrumentAgent_uploadInstrumentFile_args(const InstrumentAgent_uploadInstrumentFile_args&);
  InstrumentAgent_uploadInstrumentFile_args& operator=(const InstrumentAgent_uploadInstrumentFile_args&);
  InstrumentAgent_uploadInstrumentFile_args() : filePath(), url() {
  }

  virtual ~InstrumentAgent_uploadInstrumentFile_args() throw();
  std::string filePath;
  std::string url;

  _InstrumentAgent_uploadInstrumentFile_args__isset __isset;

  void __set_filePath(const std::string& val);

  void __set_url(const std::string& val);

  bool operator == (const InstrumentAgent_uploadInstrumentFile_args & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_uploadInstrumentFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_uploadInstrumentFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_uploadInstrumentFile_pargs {
 public:


  virtual ~InstrumentAgent_uploadInstrumentFile_pargs() throw();
  const std::string* filePath;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_uploadInstrumentFile_result__isset {
  _InstrumentAgent_uploadInstrumentFile_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_uploadInstrumentFile_result__isset;

class InstrumentAgent_uploadInstrumentFile_result {
 public:

  InstrumentAgent_uploadInstrumentFile_result(const InstrumentAgent_uploadInstrumentFile_result&);
  InstrumentAgent_uploadInstrumentFile_result& operator=(const InstrumentAgent_uploadInstrumentFile_result&);
  InstrumentAgent_uploadInstrumentFile_result() : success(0) {
  }

  virtual ~InstrumentAgent_uploadInstrumentFile_result() throw();
  bool success;

  _InstrumentAgent_uploadInstrumentFile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_uploadInstrumentFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_uploadInstrumentFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_uploadInstrumentFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_uploadInstrumentFile_presult__isset {
  _InstrumentAgent_uploadInstrumentFile_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_uploadInstrumentFile_presult__isset;

class InstrumentAgent_uploadInstrumentFile_presult {
 public:


  virtual ~InstrumentAgent_uploadInstrumentFile_presult() throw();
  bool* success;

  _InstrumentAgent_uploadInstrumentFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_addFolder_args__isset {
  _InstrumentAgent_addFolder_args__isset() : filePath(false) {}
  bool filePath :1;
} _InstrumentAgent_addFolder_args__isset;

class InstrumentAgent_addFolder_args {
 public:

  InstrumentAgent_addFolder_args(const InstrumentAgent_addFolder_args&);
  InstrumentAgent_addFolder_args& operator=(const InstrumentAgent_addFolder_args&);
  InstrumentAgent_addFolder_args() : filePath() {
  }

  virtual ~InstrumentAgent_addFolder_args() throw();
  std::string filePath;

  _InstrumentAgent_addFolder_args__isset __isset;

  void __set_filePath(const std::string& val);

  bool operator == (const InstrumentAgent_addFolder_args & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_addFolder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_addFolder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_addFolder_pargs {
 public:


  virtual ~InstrumentAgent_addFolder_pargs() throw();
  const std::string* filePath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_addFolder_result__isset {
  _InstrumentAgent_addFolder_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_addFolder_result__isset;

class InstrumentAgent_addFolder_result {
 public:

  InstrumentAgent_addFolder_result(const InstrumentAgent_addFolder_result&);
  InstrumentAgent_addFolder_result& operator=(const InstrumentAgent_addFolder_result&);
  InstrumentAgent_addFolder_result() : success(0) {
  }

  virtual ~InstrumentAgent_addFolder_result() throw();
  bool success;

  _InstrumentAgent_addFolder_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_addFolder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_addFolder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_addFolder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_addFolder_presult__isset {
  _InstrumentAgent_addFolder_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_addFolder_presult__isset;

class InstrumentAgent_addFolder_presult {
 public:


  virtual ~InstrumentAgent_addFolder_presult() throw();
  bool* success;

  _InstrumentAgent_addFolder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentAgent_excuteCommand_args__isset {
  _InstrumentAgent_excuteCommand_args__isset() : command(false) {}
  bool command :1;
} _InstrumentAgent_excuteCommand_args__isset;

class InstrumentAgent_excuteCommand_args {
 public:

  InstrumentAgent_excuteCommand_args(const InstrumentAgent_excuteCommand_args&);
  InstrumentAgent_excuteCommand_args& operator=(const InstrumentAgent_excuteCommand_args&);
  InstrumentAgent_excuteCommand_args() : command() {
  }

  virtual ~InstrumentAgent_excuteCommand_args() throw();
  std::string command;

  _InstrumentAgent_excuteCommand_args__isset __isset;

  void __set_command(const std::string& val);

  bool operator == (const InstrumentAgent_excuteCommand_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_excuteCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_excuteCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_excuteCommand_pargs {
 public:


  virtual ~InstrumentAgent_excuteCommand_pargs() throw();
  const std::string* command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_excuteCommand_result__isset {
  _InstrumentAgent_excuteCommand_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_excuteCommand_result__isset;

class InstrumentAgent_excuteCommand_result {
 public:

  InstrumentAgent_excuteCommand_result(const InstrumentAgent_excuteCommand_result&);
  InstrumentAgent_excuteCommand_result& operator=(const InstrumentAgent_excuteCommand_result&);
  InstrumentAgent_excuteCommand_result() : success() {
  }

  virtual ~InstrumentAgent_excuteCommand_result() throw();
  std::string success;

  _InstrumentAgent_excuteCommand_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const InstrumentAgent_excuteCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_excuteCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_excuteCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_excuteCommand_presult__isset {
  _InstrumentAgent_excuteCommand_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_excuteCommand_presult__isset;

class InstrumentAgent_excuteCommand_presult {
 public:


  virtual ~InstrumentAgent_excuteCommand_presult() throw();
  std::string* success;

  _InstrumentAgent_excuteCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentAgent_factorypattern_args {
 public:

  InstrumentAgent_factorypattern_args(const InstrumentAgent_factorypattern_args&);
  InstrumentAgent_factorypattern_args& operator=(const InstrumentAgent_factorypattern_args&);
  InstrumentAgent_factorypattern_args() {
  }

  virtual ~InstrumentAgent_factorypattern_args() throw();

  bool operator == (const InstrumentAgent_factorypattern_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentAgent_factorypattern_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_factorypattern_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_factorypattern_pargs {
 public:


  virtual ~InstrumentAgent_factorypattern_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_factorypattern_result__isset {
  _InstrumentAgent_factorypattern_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_factorypattern_result__isset;

class InstrumentAgent_factorypattern_result {
 public:

  InstrumentAgent_factorypattern_result(const InstrumentAgent_factorypattern_result&);
  InstrumentAgent_factorypattern_result& operator=(const InstrumentAgent_factorypattern_result&);
  InstrumentAgent_factorypattern_result() : success(0) {
  }

  virtual ~InstrumentAgent_factorypattern_result() throw();
  bool success;

  _InstrumentAgent_factorypattern_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_factorypattern_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_factorypattern_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_factorypattern_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_factorypattern_presult__isset {
  _InstrumentAgent_factorypattern_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_factorypattern_presult__isset;

class InstrumentAgent_factorypattern_presult {
 public:


  virtual ~InstrumentAgent_factorypattern_presult() throw();
  bool* success;

  _InstrumentAgent_factorypattern_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentAgent_faultClearing_args {
 public:

  InstrumentAgent_faultClearing_args(const InstrumentAgent_faultClearing_args&);
  InstrumentAgent_faultClearing_args& operator=(const InstrumentAgent_faultClearing_args&);
  InstrumentAgent_faultClearing_args() {
  }

  virtual ~InstrumentAgent_faultClearing_args() throw();

  bool operator == (const InstrumentAgent_faultClearing_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentAgent_faultClearing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_faultClearing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentAgent_faultClearing_pargs {
 public:


  virtual ~InstrumentAgent_faultClearing_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_faultClearing_result__isset {
  _InstrumentAgent_faultClearing_result__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_faultClearing_result__isset;

class InstrumentAgent_faultClearing_result {
 public:

  InstrumentAgent_faultClearing_result(const InstrumentAgent_faultClearing_result&);
  InstrumentAgent_faultClearing_result& operator=(const InstrumentAgent_faultClearing_result&);
  InstrumentAgent_faultClearing_result() : success(0) {
  }

  virtual ~InstrumentAgent_faultClearing_result() throw();
  bool success;

  _InstrumentAgent_faultClearing_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentAgent_faultClearing_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentAgent_faultClearing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentAgent_faultClearing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentAgent_faultClearing_presult__isset {
  _InstrumentAgent_faultClearing_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentAgent_faultClearing_presult__isset;

class InstrumentAgent_faultClearing_presult {
 public:


  virtual ~InstrumentAgent_faultClearing_presult() throw();
  bool* success;

  _InstrumentAgent_faultClearing_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InstrumentAgentClient : virtual public InstrumentAgentIf {
 public:
  InstrumentAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InstrumentAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& data);
  void send_echo(const std::string& data);
  void recv_echo(std::string& _return);
  bool upgrade(const std::string& type, const std::string& newVersion, const std::string& url);
  void send_upgrade(const std::string& type, const std::string& newVersion, const std::string& url);
  bool recv_upgrade();
  void getSignals(std::vector<Signal> & _return);
  void send_getSignals();
  void recv_getSignals(std::vector<Signal> & _return);
  bool setSignalUpdateCycle(const double cycleSec);
  void send_setSignalUpdateCycle(const double cycleSec);
  bool recv_setSignalUpdateCycle();
  bool changeConfigs(const std::vector<Config> & configs);
  void send_changeConfigs(const std::vector<Config> & configs);
  bool recv_changeConfigs();
  bool changeSystemTime(const int64_t time);
  void send_changeSystemTime(const int64_t time);
  bool recv_changeSystemTime();
  bool restore(const RoleType::type roleType, const std::string& profileName);
  void send_restore(const RoleType::type roleType, const std::string& profileName);
  bool recv_restore();
  bool reboot();
  void send_reboot();
  bool recv_reboot();
  bool execute(const Operation& op);
  void send_execute(const Operation& op);
  bool recv_execute();
  bool diagnose(const std::vector<Diagnosis> & diags);
  void send_diagnose(const std::vector<Diagnosis> & diags);
  bool recv_diagnose();
  bool stop();
  void send_stop();
  bool recv_stop();
  bool setAuthorization(const Authorization& authorization);
  void send_setAuthorization(const Authorization& authorization);
  bool recv_setAuthorization();
  bool calibrationTouchScreen();
  void send_calibrationTouchScreen();
  bool recv_calibrationTouchScreen();
  bool reintateFactorypattern();
  void send_reintateFactorypattern();
  bool recv_reintateFactorypattern();
  bool updataMeasureData(const MeasureData& data);
  void send_updataMeasureData(const MeasureData& data);
  bool recv_updataMeasureData();
  void getLogFileNames(std::vector<std::string> & _return);
  void send_getLogFileNames();
  void recv_getLogFileNames(std::vector<std::string> & _return);
  bool catchLogFile(const std::string& logFileName, const std::string& uploadPath);
  void send_catchLogFile(const std::string& logFileName, const std::string& uploadPath);
  bool recv_catchLogFile();
  bool cdFoleder(const std::string& filePath);
  void send_cdFoleder(const std::string& filePath);
  bool recv_cdFoleder();
  void getFileList(std::vector<InstrumentFile> & _return, const std::string& filePath, const bool showHiddenFile);
  void send_getFileList(const std::string& filePath, const bool showHiddenFile);
  void recv_getFileList(std::vector<InstrumentFile> & _return);
  bool downLoadInstrumentFile(const std::string& filePath, const std::string& uploadPath);
  void send_downLoadInstrumentFile(const std::string& filePath, const std::string& uploadPath);
  bool recv_downLoadInstrumentFile();
  bool deleteInstrumentFile(const std::string& filePath);
  void send_deleteInstrumentFile(const std::string& filePath);
  bool recv_deleteInstrumentFile();
  bool uploadInstrumentFile(const std::string& filePath, const std::string& url);
  void send_uploadInstrumentFile(const std::string& filePath, const std::string& url);
  bool recv_uploadInstrumentFile();
  bool addFolder(const std::string& filePath);
  void send_addFolder(const std::string& filePath);
  bool recv_addFolder();
  void excuteCommand(std::string& _return, const std::string& command);
  void send_excuteCommand(const std::string& command);
  void recv_excuteCommand(std::string& _return);
  bool factorypattern();
  void send_factorypattern();
  bool recv_factorypattern();
  bool faultClearing();
  void send_faultClearing();
  bool recv_faultClearing();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InstrumentAgentProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<InstrumentAgentIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (InstrumentAgentProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upgrade(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSignals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSignalUpdateCycle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeConfigs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeSystemTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_restore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reboot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_diagnose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setAuthorization(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_calibrationTouchScreen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reintateFactorypattern(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updataMeasureData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLogFileNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_catchLogFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cdFoleder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFileList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_downLoadInstrumentFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteInstrumentFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadInstrumentFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addFolder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_excuteCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_factorypattern(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_faultClearing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InstrumentAgentProcessor(boost::shared_ptr<InstrumentAgentIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &InstrumentAgentProcessor::process_echo;
    processMap_["upgrade"] = &InstrumentAgentProcessor::process_upgrade;
    processMap_["getSignals"] = &InstrumentAgentProcessor::process_getSignals;
    processMap_["setSignalUpdateCycle"] = &InstrumentAgentProcessor::process_setSignalUpdateCycle;
    processMap_["changeConfigs"] = &InstrumentAgentProcessor::process_changeConfigs;
    processMap_["changeSystemTime"] = &InstrumentAgentProcessor::process_changeSystemTime;
    processMap_["restore"] = &InstrumentAgentProcessor::process_restore;
    processMap_["reboot"] = &InstrumentAgentProcessor::process_reboot;
    processMap_["execute"] = &InstrumentAgentProcessor::process_execute;
    processMap_["diagnose"] = &InstrumentAgentProcessor::process_diagnose;
    processMap_["stop"] = &InstrumentAgentProcessor::process_stop;
    processMap_["setAuthorization"] = &InstrumentAgentProcessor::process_setAuthorization;
    processMap_["calibrationTouchScreen"] = &InstrumentAgentProcessor::process_calibrationTouchScreen;
    processMap_["reintateFactorypattern"] = &InstrumentAgentProcessor::process_reintateFactorypattern;
    processMap_["updataMeasureData"] = &InstrumentAgentProcessor::process_updataMeasureData;
    processMap_["getLogFileNames"] = &InstrumentAgentProcessor::process_getLogFileNames;
    processMap_["catchLogFile"] = &InstrumentAgentProcessor::process_catchLogFile;
    processMap_["cdFoleder"] = &InstrumentAgentProcessor::process_cdFoleder;
    processMap_["getFileList"] = &InstrumentAgentProcessor::process_getFileList;
    processMap_["downLoadInstrumentFile"] = &InstrumentAgentProcessor::process_downLoadInstrumentFile;
    processMap_["deleteInstrumentFile"] = &InstrumentAgentProcessor::process_deleteInstrumentFile;
    processMap_["uploadInstrumentFile"] = &InstrumentAgentProcessor::process_uploadInstrumentFile;
    processMap_["addFolder"] = &InstrumentAgentProcessor::process_addFolder;
    processMap_["excuteCommand"] = &InstrumentAgentProcessor::process_excuteCommand;
    processMap_["factorypattern"] = &InstrumentAgentProcessor::process_factorypattern;
    processMap_["faultClearing"] = &InstrumentAgentProcessor::process_faultClearing;
  }

  virtual ~InstrumentAgentProcessor() {}
};

class InstrumentAgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InstrumentAgentProcessorFactory(const ::boost::shared_ptr< InstrumentAgentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< InstrumentAgentIfFactory > handlerFactory_;
};

class InstrumentAgentMultiface : virtual public InstrumentAgentIf {
 public:
  InstrumentAgentMultiface(std::vector<boost::shared_ptr<InstrumentAgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InstrumentAgentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InstrumentAgentIf> > ifaces_;
  InstrumentAgentMultiface() {}
  void add(boost::shared_ptr<InstrumentAgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo(_return, data);
    }
    ifaces_[i]->echo(_return, data);
    return;
  }

  bool upgrade(const std::string& type, const std::string& newVersion, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upgrade(type, newVersion, url);
    }
    return ifaces_[i]->upgrade(type, newVersion, url);
  }

  void getSignals(std::vector<Signal> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSignals(_return);
    }
    ifaces_[i]->getSignals(_return);
    return;
  }

  bool setSignalUpdateCycle(const double cycleSec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSignalUpdateCycle(cycleSec);
    }
    return ifaces_[i]->setSignalUpdateCycle(cycleSec);
  }

  bool changeConfigs(const std::vector<Config> & configs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeConfigs(configs);
    }
    return ifaces_[i]->changeConfigs(configs);
  }

  bool changeSystemTime(const int64_t time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeSystemTime(time);
    }
    return ifaces_[i]->changeSystemTime(time);
  }

  bool restore(const RoleType::type roleType, const std::string& profileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->restore(roleType, profileName);
    }
    return ifaces_[i]->restore(roleType, profileName);
  }

  bool reboot() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reboot();
    }
    return ifaces_[i]->reboot();
  }

  bool execute(const Operation& op) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute(op);
    }
    return ifaces_[i]->execute(op);
  }

  bool diagnose(const std::vector<Diagnosis> & diags) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->diagnose(diags);
    }
    return ifaces_[i]->diagnose(diags);
  }

  bool stop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    return ifaces_[i]->stop();
  }

  bool setAuthorization(const Authorization& authorization) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setAuthorization(authorization);
    }
    return ifaces_[i]->setAuthorization(authorization);
  }

  bool calibrationTouchScreen() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calibrationTouchScreen();
    }
    return ifaces_[i]->calibrationTouchScreen();
  }

  bool reintateFactorypattern() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reintateFactorypattern();
    }
    return ifaces_[i]->reintateFactorypattern();
  }

  bool updataMeasureData(const MeasureData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updataMeasureData(data);
    }
    return ifaces_[i]->updataMeasureData(data);
  }

  void getLogFileNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLogFileNames(_return);
    }
    ifaces_[i]->getLogFileNames(_return);
    return;
  }

  bool catchLogFile(const std::string& logFileName, const std::string& uploadPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->catchLogFile(logFileName, uploadPath);
    }
    return ifaces_[i]->catchLogFile(logFileName, uploadPath);
  }

  bool cdFoleder(const std::string& filePath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cdFoleder(filePath);
    }
    return ifaces_[i]->cdFoleder(filePath);
  }

  void getFileList(std::vector<InstrumentFile> & _return, const std::string& filePath, const bool showHiddenFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFileList(_return, filePath, showHiddenFile);
    }
    ifaces_[i]->getFileList(_return, filePath, showHiddenFile);
    return;
  }

  bool downLoadInstrumentFile(const std::string& filePath, const std::string& uploadPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->downLoadInstrumentFile(filePath, uploadPath);
    }
    return ifaces_[i]->downLoadInstrumentFile(filePath, uploadPath);
  }

  bool deleteInstrumentFile(const std::string& filePath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteInstrumentFile(filePath);
    }
    return ifaces_[i]->deleteInstrumentFile(filePath);
  }

  bool uploadInstrumentFile(const std::string& filePath, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadInstrumentFile(filePath, url);
    }
    return ifaces_[i]->uploadInstrumentFile(filePath, url);
  }

  bool addFolder(const std::string& filePath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addFolder(filePath);
    }
    return ifaces_[i]->addFolder(filePath);
  }

  void excuteCommand(std::string& _return, const std::string& command) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->excuteCommand(_return, command);
    }
    ifaces_[i]->excuteCommand(_return, command);
    return;
  }

  bool factorypattern() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->factorypattern();
    }
    return ifaces_[i]->factorypattern();
  }

  bool faultClearing() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->faultClearing();
    }
    return ifaces_[i]->faultClearing();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class InstrumentAgentConcurrentClient : virtual public InstrumentAgentIf {
 public:
  InstrumentAgentConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InstrumentAgentConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& data);
  int32_t send_echo(const std::string& data);
  void recv_echo(std::string& _return, const int32_t seqid);
  bool upgrade(const std::string& type, const std::string& newVersion, const std::string& url);
  int32_t send_upgrade(const std::string& type, const std::string& newVersion, const std::string& url);
  bool recv_upgrade(const int32_t seqid);
  void getSignals(std::vector<Signal> & _return);
  int32_t send_getSignals();
  void recv_getSignals(std::vector<Signal> & _return, const int32_t seqid);
  bool setSignalUpdateCycle(const double cycleSec);
  int32_t send_setSignalUpdateCycle(const double cycleSec);
  bool recv_setSignalUpdateCycle(const int32_t seqid);
  bool changeConfigs(const std::vector<Config> & configs);
  int32_t send_changeConfigs(const std::vector<Config> & configs);
  bool recv_changeConfigs(const int32_t seqid);
  bool changeSystemTime(const int64_t time);
  int32_t send_changeSystemTime(const int64_t time);
  bool recv_changeSystemTime(const int32_t seqid);
  bool restore(const RoleType::type roleType, const std::string& profileName);
  int32_t send_restore(const RoleType::type roleType, const std::string& profileName);
  bool recv_restore(const int32_t seqid);
  bool reboot();
  int32_t send_reboot();
  bool recv_reboot(const int32_t seqid);
  bool execute(const Operation& op);
  int32_t send_execute(const Operation& op);
  bool recv_execute(const int32_t seqid);
  bool diagnose(const std::vector<Diagnosis> & diags);
  int32_t send_diagnose(const std::vector<Diagnosis> & diags);
  bool recv_diagnose(const int32_t seqid);
  bool stop();
  int32_t send_stop();
  bool recv_stop(const int32_t seqid);
  bool setAuthorization(const Authorization& authorization);
  int32_t send_setAuthorization(const Authorization& authorization);
  bool recv_setAuthorization(const int32_t seqid);
  bool calibrationTouchScreen();
  int32_t send_calibrationTouchScreen();
  bool recv_calibrationTouchScreen(const int32_t seqid);
  bool reintateFactorypattern();
  int32_t send_reintateFactorypattern();
  bool recv_reintateFactorypattern(const int32_t seqid);
  bool updataMeasureData(const MeasureData& data);
  int32_t send_updataMeasureData(const MeasureData& data);
  bool recv_updataMeasureData(const int32_t seqid);
  void getLogFileNames(std::vector<std::string> & _return);
  int32_t send_getLogFileNames();
  void recv_getLogFileNames(std::vector<std::string> & _return, const int32_t seqid);
  bool catchLogFile(const std::string& logFileName, const std::string& uploadPath);
  int32_t send_catchLogFile(const std::string& logFileName, const std::string& uploadPath);
  bool recv_catchLogFile(const int32_t seqid);
  bool cdFoleder(const std::string& filePath);
  int32_t send_cdFoleder(const std::string& filePath);
  bool recv_cdFoleder(const int32_t seqid);
  void getFileList(std::vector<InstrumentFile> & _return, const std::string& filePath, const bool showHiddenFile);
  int32_t send_getFileList(const std::string& filePath, const bool showHiddenFile);
  void recv_getFileList(std::vector<InstrumentFile> & _return, const int32_t seqid);
  bool downLoadInstrumentFile(const std::string& filePath, const std::string& uploadPath);
  int32_t send_downLoadInstrumentFile(const std::string& filePath, const std::string& uploadPath);
  bool recv_downLoadInstrumentFile(const int32_t seqid);
  bool deleteInstrumentFile(const std::string& filePath);
  int32_t send_deleteInstrumentFile(const std::string& filePath);
  bool recv_deleteInstrumentFile(const int32_t seqid);
  bool uploadInstrumentFile(const std::string& filePath, const std::string& url);
  int32_t send_uploadInstrumentFile(const std::string& filePath, const std::string& url);
  bool recv_uploadInstrumentFile(const int32_t seqid);
  bool addFolder(const std::string& filePath);
  int32_t send_addFolder(const std::string& filePath);
  bool recv_addFolder(const int32_t seqid);
  void excuteCommand(std::string& _return, const std::string& command);
  int32_t send_excuteCommand(const std::string& command);
  void recv_excuteCommand(std::string& _return, const int32_t seqid);
  bool factorypattern();
  int32_t send_factorypattern();
  bool recv_factorypattern(const int32_t seqid);
  bool faultClearing();
  int32_t send_faultClearing();
  bool recv_faultClearing(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

//#ifdef _WIN32
//  #pragma warning( pop )
//#endif

}}}} // namespace

#endif
