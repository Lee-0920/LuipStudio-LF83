/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InstrumentManager_H
#define InstrumentManager_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "InstrumentManager_types.h"

namespace Interface { namespace Wqimc { namespace Api { namespace Manager {

//#ifdef _WIN32
//  #pragma warning( push )
//  #pragma warning (disable : 4250 ) //inheriting methods via dominance
//#endif

class InstrumentManagerIf {
 public:
  virtual ~InstrumentManagerIf() {}
  virtual void echo(std::string& _return, const std::string& data) = 0;
  virtual bool authenticate(const std::string& code) = 0;
  virtual int64_t getSystemTime() = 0;
  virtual bool upload(const Instrument& instrument) = 0;
  virtual bool uploadInstrumentPermissionLevel(const int32_t level) = 0;
  virtual bool alarm(const Alarm& alarm) = 0;
  virtual bool updateStatus(const Status& status) = 0;
  virtual bool updateAction(const Status& action) = 0;
  virtual bool uploadMeasureData(const MeasureData& data) = 0;
  virtual bool uploadMeasureCurve(const MeasureCurve& curve) = 0;
  virtual bool uploadSettingProfiles(const std::vector<Profile> & profilesList) = 0;
  virtual bool updateConfigs(const std::vector<Config> & config) = 0;
  virtual bool uploadReagentProfile(const std::vector<ReagentConfigItem> & configs) = 0;
  virtual bool uploadConsumableProfile(const std::vector<ConsumableConfigItem> & configs) = 0;
  virtual bool updateReagentRemain(const std::vector<ReagentRemain> & remains) = 0;
  virtual bool uploadSignalProfile(const Profile& profile) = 0;
  virtual bool updateSignals(const std::vector<Signal> & signalList) = 0;
  virtual bool uploadOperations(const std::vector<OperationSuit> & ops) = 0;
  virtual bool uploadDiagnoses(const std::vector<DiagnosisSuit> & ops) = 0;
  virtual bool notifyDiagnosisResult(const DiagnosisResult& result) = 0;
};

class InstrumentManagerIfFactory {
 public:
  typedef InstrumentManagerIf Handler;

  virtual ~InstrumentManagerIfFactory() {}

  virtual InstrumentManagerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InstrumentManagerIf* /* handler */) = 0;
};

class InstrumentManagerIfSingletonFactory : virtual public InstrumentManagerIfFactory {
 public:
  InstrumentManagerIfSingletonFactory(const boost::shared_ptr<InstrumentManagerIf>& iface) : iface_(iface) {}
  virtual ~InstrumentManagerIfSingletonFactory() {}

  virtual InstrumentManagerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(InstrumentManagerIf* /* handler */) {}

 protected:
  boost::shared_ptr<InstrumentManagerIf> iface_;
};

class InstrumentManagerNull : virtual public InstrumentManagerIf {
 public:
  virtual ~InstrumentManagerNull() {}
  void echo(std::string& /* _return */, const std::string& /* data */) {
    return;
  }
  bool authenticate(const std::string& /* code */) {
    bool _return = false;
    return _return;
  }
  int64_t getSystemTime() {
    int64_t _return = 0;
    return _return;
  }
  bool upload(const Instrument& /* instrument */) {
    bool _return = false;
    return _return;
  }
  bool uploadInstrumentPermissionLevel(const int32_t /* level */) {
    bool _return = false;
    return _return;
  }
  bool alarm(const Alarm& /* alarm */) {
    bool _return = false;
    return _return;
  }
  bool updateStatus(const Status& /* status */) {
    bool _return = false;
    return _return;
  }
  bool updateAction(const Status& /* action */) {
    bool _return = false;
    return _return;
  }
  bool uploadMeasureData(const MeasureData& /* data */) {
    bool _return = false;
    return _return;
  }
  bool uploadMeasureCurve(const MeasureCurve& /* curve */) {
    bool _return = false;
    return _return;
  }
  bool uploadSettingProfiles(const std::vector<Profile> & /* profilesList */) {
    bool _return = false;
    return _return;
  }
  bool updateConfigs(const std::vector<Config> & /* config */) {
    bool _return = false;
    return _return;
  }
  bool uploadReagentProfile(const std::vector<ReagentConfigItem> & /* configs */) {
    bool _return = false;
    return _return;
  }
  bool uploadConsumableProfile(const std::vector<ConsumableConfigItem> & /* configs */) {
    bool _return = false;
    return _return;
  }
  bool updateReagentRemain(const std::vector<ReagentRemain> & /* remains */) {
    bool _return = false;
    return _return;
  }
  bool uploadSignalProfile(const Profile& /* profile */) {
    bool _return = false;
    return _return;
  }
  bool updateSignals(const std::vector<Signal> & /* signalList */) {
    bool _return = false;
    return _return;
  }
  bool uploadOperations(const std::vector<OperationSuit> & /* ops */) {
    bool _return = false;
    return _return;
  }
  bool uploadDiagnoses(const std::vector<DiagnosisSuit> & /* ops */) {
    bool _return = false;
    return _return;
  }
  bool notifyDiagnosisResult(const DiagnosisResult& /* result */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _InstrumentManager_echo_args__isset {
  _InstrumentManager_echo_args__isset() : data(false) {}
  bool data :1;
} _InstrumentManager_echo_args__isset;

class InstrumentManager_echo_args {
 public:

  InstrumentManager_echo_args(const InstrumentManager_echo_args&);
  InstrumentManager_echo_args& operator=(const InstrumentManager_echo_args&);
  InstrumentManager_echo_args() : data() {
  }

  virtual ~InstrumentManager_echo_args() throw();
  std::string data;

  _InstrumentManager_echo_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const InstrumentManager_echo_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_echo_pargs {
 public:


  virtual ~InstrumentManager_echo_pargs() throw();
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_echo_result__isset {
  _InstrumentManager_echo_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_echo_result__isset;

class InstrumentManager_echo_result {
 public:

  InstrumentManager_echo_result(const InstrumentManager_echo_result&);
  InstrumentManager_echo_result& operator=(const InstrumentManager_echo_result&);
  InstrumentManager_echo_result() : success() {
  }

  virtual ~InstrumentManager_echo_result() throw();
  std::string success;

  _InstrumentManager_echo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const InstrumentManager_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_echo_presult__isset {
  _InstrumentManager_echo_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_echo_presult__isset;

class InstrumentManager_echo_presult {
 public:


  virtual ~InstrumentManager_echo_presult() throw();
  std::string* success;

  _InstrumentManager_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_authenticate_args__isset {
  _InstrumentManager_authenticate_args__isset() : code(false) {}
  bool code :1;
} _InstrumentManager_authenticate_args__isset;

class InstrumentManager_authenticate_args {
 public:

  InstrumentManager_authenticate_args(const InstrumentManager_authenticate_args&);
  InstrumentManager_authenticate_args& operator=(const InstrumentManager_authenticate_args&);
  InstrumentManager_authenticate_args() : code() {
  }

  virtual ~InstrumentManager_authenticate_args() throw();
  std::string code;

  _InstrumentManager_authenticate_args__isset __isset;

  void __set_code(const std::string& val);

  bool operator == (const InstrumentManager_authenticate_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_authenticate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_authenticate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_authenticate_pargs {
 public:


  virtual ~InstrumentManager_authenticate_pargs() throw();
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_authenticate_result__isset {
  _InstrumentManager_authenticate_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_authenticate_result__isset;

class InstrumentManager_authenticate_result {
 public:

  InstrumentManager_authenticate_result(const InstrumentManager_authenticate_result&);
  InstrumentManager_authenticate_result& operator=(const InstrumentManager_authenticate_result&);
  InstrumentManager_authenticate_result() : success(0) {
  }

  virtual ~InstrumentManager_authenticate_result() throw();
  bool success;

  _InstrumentManager_authenticate_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_authenticate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_authenticate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_authenticate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_authenticate_presult__isset {
  _InstrumentManager_authenticate_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_authenticate_presult__isset;

class InstrumentManager_authenticate_presult {
 public:


  virtual ~InstrumentManager_authenticate_presult() throw();
  bool* success;

  _InstrumentManager_authenticate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InstrumentManager_getSystemTime_args {
 public:

  InstrumentManager_getSystemTime_args(const InstrumentManager_getSystemTime_args&);
  InstrumentManager_getSystemTime_args& operator=(const InstrumentManager_getSystemTime_args&);
  InstrumentManager_getSystemTime_args() {
  }

  virtual ~InstrumentManager_getSystemTime_args() throw();

  bool operator == (const InstrumentManager_getSystemTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InstrumentManager_getSystemTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_getSystemTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_getSystemTime_pargs {
 public:


  virtual ~InstrumentManager_getSystemTime_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_getSystemTime_result__isset {
  _InstrumentManager_getSystemTime_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_getSystemTime_result__isset;

class InstrumentManager_getSystemTime_result {
 public:

  InstrumentManager_getSystemTime_result(const InstrumentManager_getSystemTime_result&);
  InstrumentManager_getSystemTime_result& operator=(const InstrumentManager_getSystemTime_result&);
  InstrumentManager_getSystemTime_result() : success(0) {
  }

  virtual ~InstrumentManager_getSystemTime_result() throw();
  int64_t success;

  _InstrumentManager_getSystemTime_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const InstrumentManager_getSystemTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_getSystemTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_getSystemTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_getSystemTime_presult__isset {
  _InstrumentManager_getSystemTime_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_getSystemTime_presult__isset;

class InstrumentManager_getSystemTime_presult {
 public:


  virtual ~InstrumentManager_getSystemTime_presult() throw();
  int64_t* success;

  _InstrumentManager_getSystemTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_upload_args__isset {
  _InstrumentManager_upload_args__isset() : instrument(false) {}
  bool instrument :1;
} _InstrumentManager_upload_args__isset;

class InstrumentManager_upload_args {
 public:

  InstrumentManager_upload_args(const InstrumentManager_upload_args&);
  InstrumentManager_upload_args& operator=(const InstrumentManager_upload_args&);
  InstrumentManager_upload_args() {
  }

  virtual ~InstrumentManager_upload_args() throw();
  Instrument instrument;

  _InstrumentManager_upload_args__isset __isset;

  void __set_instrument(const Instrument& val);

  bool operator == (const InstrumentManager_upload_args & rhs) const
  {
    if (!(instrument == rhs.instrument))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_upload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_upload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_upload_pargs {
 public:


  virtual ~InstrumentManager_upload_pargs() throw();
  const Instrument* instrument;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_upload_result__isset {
  _InstrumentManager_upload_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_upload_result__isset;

class InstrumentManager_upload_result {
 public:

  InstrumentManager_upload_result(const InstrumentManager_upload_result&);
  InstrumentManager_upload_result& operator=(const InstrumentManager_upload_result&);
  InstrumentManager_upload_result() : success(0) {
  }

  virtual ~InstrumentManager_upload_result() throw();
  bool success;

  _InstrumentManager_upload_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_upload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_upload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_upload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_upload_presult__isset {
  _InstrumentManager_upload_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_upload_presult__isset;

class InstrumentManager_upload_presult {
 public:


  virtual ~InstrumentManager_upload_presult() throw();
  bool* success;

  _InstrumentManager_upload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadInstrumentPermissionLevel_args__isset {
  _InstrumentManager_uploadInstrumentPermissionLevel_args__isset() : level(false) {}
  bool level :1;
} _InstrumentManager_uploadInstrumentPermissionLevel_args__isset;

class InstrumentManager_uploadInstrumentPermissionLevel_args {
 public:

  InstrumentManager_uploadInstrumentPermissionLevel_args(const InstrumentManager_uploadInstrumentPermissionLevel_args&);
  InstrumentManager_uploadInstrumentPermissionLevel_args& operator=(const InstrumentManager_uploadInstrumentPermissionLevel_args&);
  InstrumentManager_uploadInstrumentPermissionLevel_args() : level(0) {
  }

  virtual ~InstrumentManager_uploadInstrumentPermissionLevel_args() throw();
  int32_t level;

  _InstrumentManager_uploadInstrumentPermissionLevel_args__isset __isset;

  void __set_level(const int32_t val);

  bool operator == (const InstrumentManager_uploadInstrumentPermissionLevel_args & rhs) const
  {
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadInstrumentPermissionLevel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadInstrumentPermissionLevel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadInstrumentPermissionLevel_pargs {
 public:


  virtual ~InstrumentManager_uploadInstrumentPermissionLevel_pargs() throw();
  const int32_t* level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadInstrumentPermissionLevel_result__isset {
  _InstrumentManager_uploadInstrumentPermissionLevel_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadInstrumentPermissionLevel_result__isset;

class InstrumentManager_uploadInstrumentPermissionLevel_result {
 public:

  InstrumentManager_uploadInstrumentPermissionLevel_result(const InstrumentManager_uploadInstrumentPermissionLevel_result&);
  InstrumentManager_uploadInstrumentPermissionLevel_result& operator=(const InstrumentManager_uploadInstrumentPermissionLevel_result&);
  InstrumentManager_uploadInstrumentPermissionLevel_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadInstrumentPermissionLevel_result() throw();
  bool success;

  _InstrumentManager_uploadInstrumentPermissionLevel_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadInstrumentPermissionLevel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadInstrumentPermissionLevel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadInstrumentPermissionLevel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadInstrumentPermissionLevel_presult__isset {
  _InstrumentManager_uploadInstrumentPermissionLevel_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadInstrumentPermissionLevel_presult__isset;

class InstrumentManager_uploadInstrumentPermissionLevel_presult {
 public:


  virtual ~InstrumentManager_uploadInstrumentPermissionLevel_presult() throw();
  bool* success;

  _InstrumentManager_uploadInstrumentPermissionLevel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_alarm_args__isset {
  _InstrumentManager_alarm_args__isset() : alarm(false) {}
  bool alarm :1;
} _InstrumentManager_alarm_args__isset;

class InstrumentManager_alarm_args {
 public:

  InstrumentManager_alarm_args(const InstrumentManager_alarm_args&);
  InstrumentManager_alarm_args& operator=(const InstrumentManager_alarm_args&);
  InstrumentManager_alarm_args() {
  }

  virtual ~InstrumentManager_alarm_args() throw();
  Alarm alarm;

  _InstrumentManager_alarm_args__isset __isset;

  void __set_alarm(const Alarm& val);

  bool operator == (const InstrumentManager_alarm_args & rhs) const
  {
    if (!(alarm == rhs.alarm))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_alarm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_alarm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_alarm_pargs {
 public:


  virtual ~InstrumentManager_alarm_pargs() throw();
  const Alarm* alarm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_alarm_result__isset {
  _InstrumentManager_alarm_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_alarm_result__isset;

class InstrumentManager_alarm_result {
 public:

  InstrumentManager_alarm_result(const InstrumentManager_alarm_result&);
  InstrumentManager_alarm_result& operator=(const InstrumentManager_alarm_result&);
  InstrumentManager_alarm_result() : success(0) {
  }

  virtual ~InstrumentManager_alarm_result() throw();
  bool success;

  _InstrumentManager_alarm_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_alarm_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_alarm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_alarm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_alarm_presult__isset {
  _InstrumentManager_alarm_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_alarm_presult__isset;

class InstrumentManager_alarm_presult {
 public:


  virtual ~InstrumentManager_alarm_presult() throw();
  bool* success;

  _InstrumentManager_alarm_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_updateStatus_args__isset {
  _InstrumentManager_updateStatus_args__isset() : status(false) {}
  bool status :1;
} _InstrumentManager_updateStatus_args__isset;

class InstrumentManager_updateStatus_args {
 public:

  InstrumentManager_updateStatus_args(const InstrumentManager_updateStatus_args&);
  InstrumentManager_updateStatus_args& operator=(const InstrumentManager_updateStatus_args&);
  InstrumentManager_updateStatus_args() {
  }

  virtual ~InstrumentManager_updateStatus_args() throw();
  Status status;

  _InstrumentManager_updateStatus_args__isset __isset;

  void __set_status(const Status& val);

  bool operator == (const InstrumentManager_updateStatus_args & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_updateStatus_pargs {
 public:


  virtual ~InstrumentManager_updateStatus_pargs() throw();
  const Status* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateStatus_result__isset {
  _InstrumentManager_updateStatus_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateStatus_result__isset;

class InstrumentManager_updateStatus_result {
 public:

  InstrumentManager_updateStatus_result(const InstrumentManager_updateStatus_result&);
  InstrumentManager_updateStatus_result& operator=(const InstrumentManager_updateStatus_result&);
  InstrumentManager_updateStatus_result() : success(0) {
  }

  virtual ~InstrumentManager_updateStatus_result() throw();
  bool success;

  _InstrumentManager_updateStatus_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_updateStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateStatus_presult__isset {
  _InstrumentManager_updateStatus_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateStatus_presult__isset;

class InstrumentManager_updateStatus_presult {
 public:


  virtual ~InstrumentManager_updateStatus_presult() throw();
  bool* success;

  _InstrumentManager_updateStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_updateAction_args__isset {
  _InstrumentManager_updateAction_args__isset() : action(false) {}
  bool action :1;
} _InstrumentManager_updateAction_args__isset;

class InstrumentManager_updateAction_args {
 public:

  InstrumentManager_updateAction_args(const InstrumentManager_updateAction_args&);
  InstrumentManager_updateAction_args& operator=(const InstrumentManager_updateAction_args&);
  InstrumentManager_updateAction_args() {
  }

  virtual ~InstrumentManager_updateAction_args() throw();
  Status action;

  _InstrumentManager_updateAction_args__isset __isset;

  void __set_action(const Status& val);

  bool operator == (const InstrumentManager_updateAction_args & rhs) const
  {
    if (!(action == rhs.action))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateAction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateAction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_updateAction_pargs {
 public:


  virtual ~InstrumentManager_updateAction_pargs() throw();
  const Status* action;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateAction_result__isset {
  _InstrumentManager_updateAction_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateAction_result__isset;

class InstrumentManager_updateAction_result {
 public:

  InstrumentManager_updateAction_result(const InstrumentManager_updateAction_result&);
  InstrumentManager_updateAction_result& operator=(const InstrumentManager_updateAction_result&);
  InstrumentManager_updateAction_result() : success(0) {
  }

  virtual ~InstrumentManager_updateAction_result() throw();
  bool success;

  _InstrumentManager_updateAction_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_updateAction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateAction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateAction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateAction_presult__isset {
  _InstrumentManager_updateAction_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateAction_presult__isset;

class InstrumentManager_updateAction_presult {
 public:


  virtual ~InstrumentManager_updateAction_presult() throw();
  bool* success;

  _InstrumentManager_updateAction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadMeasureData_args__isset {
  _InstrumentManager_uploadMeasureData_args__isset() : data(false) {}
  bool data :1;
} _InstrumentManager_uploadMeasureData_args__isset;

class InstrumentManager_uploadMeasureData_args {
 public:

  InstrumentManager_uploadMeasureData_args(const InstrumentManager_uploadMeasureData_args&);
  InstrumentManager_uploadMeasureData_args& operator=(const InstrumentManager_uploadMeasureData_args&);
  InstrumentManager_uploadMeasureData_args() {
  }

  virtual ~InstrumentManager_uploadMeasureData_args() throw();
  MeasureData data;

  _InstrumentManager_uploadMeasureData_args__isset __isset;

  void __set_data(const MeasureData& val);

  bool operator == (const InstrumentManager_uploadMeasureData_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadMeasureData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadMeasureData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadMeasureData_pargs {
 public:


  virtual ~InstrumentManager_uploadMeasureData_pargs() throw();
  const MeasureData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadMeasureData_result__isset {
  _InstrumentManager_uploadMeasureData_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadMeasureData_result__isset;

class InstrumentManager_uploadMeasureData_result {
 public:

  InstrumentManager_uploadMeasureData_result(const InstrumentManager_uploadMeasureData_result&);
  InstrumentManager_uploadMeasureData_result& operator=(const InstrumentManager_uploadMeasureData_result&);
  InstrumentManager_uploadMeasureData_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadMeasureData_result() throw();
  bool success;

  _InstrumentManager_uploadMeasureData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadMeasureData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadMeasureData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadMeasureData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadMeasureData_presult__isset {
  _InstrumentManager_uploadMeasureData_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadMeasureData_presult__isset;

class InstrumentManager_uploadMeasureData_presult {
 public:


  virtual ~InstrumentManager_uploadMeasureData_presult() throw();
  bool* success;

  _InstrumentManager_uploadMeasureData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadMeasureCurve_args__isset {
  _InstrumentManager_uploadMeasureCurve_args__isset() : curve(false) {}
  bool curve :1;
} _InstrumentManager_uploadMeasureCurve_args__isset;

class InstrumentManager_uploadMeasureCurve_args {
 public:

  InstrumentManager_uploadMeasureCurve_args(const InstrumentManager_uploadMeasureCurve_args&);
  InstrumentManager_uploadMeasureCurve_args& operator=(const InstrumentManager_uploadMeasureCurve_args&);
  InstrumentManager_uploadMeasureCurve_args() {
  }

  virtual ~InstrumentManager_uploadMeasureCurve_args() throw();
  MeasureCurve curve;

  _InstrumentManager_uploadMeasureCurve_args__isset __isset;

  void __set_curve(const MeasureCurve& val);

  bool operator == (const InstrumentManager_uploadMeasureCurve_args & rhs) const
  {
    if (!(curve == rhs.curve))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadMeasureCurve_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadMeasureCurve_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadMeasureCurve_pargs {
 public:


  virtual ~InstrumentManager_uploadMeasureCurve_pargs() throw();
  const MeasureCurve* curve;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadMeasureCurve_result__isset {
  _InstrumentManager_uploadMeasureCurve_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadMeasureCurve_result__isset;

class InstrumentManager_uploadMeasureCurve_result {
 public:

  InstrumentManager_uploadMeasureCurve_result(const InstrumentManager_uploadMeasureCurve_result&);
  InstrumentManager_uploadMeasureCurve_result& operator=(const InstrumentManager_uploadMeasureCurve_result&);
  InstrumentManager_uploadMeasureCurve_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadMeasureCurve_result() throw();
  bool success;

  _InstrumentManager_uploadMeasureCurve_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadMeasureCurve_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadMeasureCurve_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadMeasureCurve_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadMeasureCurve_presult__isset {
  _InstrumentManager_uploadMeasureCurve_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadMeasureCurve_presult__isset;

class InstrumentManager_uploadMeasureCurve_presult {
 public:


  virtual ~InstrumentManager_uploadMeasureCurve_presult() throw();
  bool* success;

  _InstrumentManager_uploadMeasureCurve_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadSettingProfiles_args__isset {
  _InstrumentManager_uploadSettingProfiles_args__isset() : profilesList(false) {}
  bool profilesList :1;
} _InstrumentManager_uploadSettingProfiles_args__isset;

class InstrumentManager_uploadSettingProfiles_args {
 public:

  InstrumentManager_uploadSettingProfiles_args(const InstrumentManager_uploadSettingProfiles_args&);
  InstrumentManager_uploadSettingProfiles_args& operator=(const InstrumentManager_uploadSettingProfiles_args&);
  InstrumentManager_uploadSettingProfiles_args() {
  }

  virtual ~InstrumentManager_uploadSettingProfiles_args() throw();
  std::vector<Profile>  profilesList;

  _InstrumentManager_uploadSettingProfiles_args__isset __isset;

  void __set_profilesList(const std::vector<Profile> & val);

  bool operator == (const InstrumentManager_uploadSettingProfiles_args & rhs) const
  {
    if (!(profilesList == rhs.profilesList))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadSettingProfiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadSettingProfiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadSettingProfiles_pargs {
 public:


  virtual ~InstrumentManager_uploadSettingProfiles_pargs() throw();
  const std::vector<Profile> * profilesList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadSettingProfiles_result__isset {
  _InstrumentManager_uploadSettingProfiles_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadSettingProfiles_result__isset;

class InstrumentManager_uploadSettingProfiles_result {
 public:

  InstrumentManager_uploadSettingProfiles_result(const InstrumentManager_uploadSettingProfiles_result&);
  InstrumentManager_uploadSettingProfiles_result& operator=(const InstrumentManager_uploadSettingProfiles_result&);
  InstrumentManager_uploadSettingProfiles_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadSettingProfiles_result() throw();
  bool success;

  _InstrumentManager_uploadSettingProfiles_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadSettingProfiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadSettingProfiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadSettingProfiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadSettingProfiles_presult__isset {
  _InstrumentManager_uploadSettingProfiles_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadSettingProfiles_presult__isset;

class InstrumentManager_uploadSettingProfiles_presult {
 public:


  virtual ~InstrumentManager_uploadSettingProfiles_presult() throw();
  bool* success;

  _InstrumentManager_uploadSettingProfiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_updateConfigs_args__isset {
  _InstrumentManager_updateConfigs_args__isset() : config(false) {}
  bool config :1;
} _InstrumentManager_updateConfigs_args__isset;

class InstrumentManager_updateConfigs_args {
 public:

  InstrumentManager_updateConfigs_args(const InstrumentManager_updateConfigs_args&);
  InstrumentManager_updateConfigs_args& operator=(const InstrumentManager_updateConfigs_args&);
  InstrumentManager_updateConfigs_args() {
  }

  virtual ~InstrumentManager_updateConfigs_args() throw();
  std::vector<Config>  config;

  _InstrumentManager_updateConfigs_args__isset __isset;

  void __set_config(const std::vector<Config> & val);

  bool operator == (const InstrumentManager_updateConfigs_args & rhs) const
  {
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateConfigs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateConfigs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_updateConfigs_pargs {
 public:


  virtual ~InstrumentManager_updateConfigs_pargs() throw();
  const std::vector<Config> * config;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateConfigs_result__isset {
  _InstrumentManager_updateConfigs_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateConfigs_result__isset;

class InstrumentManager_updateConfigs_result {
 public:

  InstrumentManager_updateConfigs_result(const InstrumentManager_updateConfigs_result&);
  InstrumentManager_updateConfigs_result& operator=(const InstrumentManager_updateConfigs_result&);
  InstrumentManager_updateConfigs_result() : success(0) {
  }

  virtual ~InstrumentManager_updateConfigs_result() throw();
  bool success;

  _InstrumentManager_updateConfigs_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_updateConfigs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateConfigs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateConfigs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateConfigs_presult__isset {
  _InstrumentManager_updateConfigs_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateConfigs_presult__isset;

class InstrumentManager_updateConfigs_presult {
 public:


  virtual ~InstrumentManager_updateConfigs_presult() throw();
  bool* success;

  _InstrumentManager_updateConfigs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadReagentProfile_args__isset {
  _InstrumentManager_uploadReagentProfile_args__isset() : configs(false) {}
  bool configs :1;
} _InstrumentManager_uploadReagentProfile_args__isset;

class InstrumentManager_uploadReagentProfile_args {
 public:

  InstrumentManager_uploadReagentProfile_args(const InstrumentManager_uploadReagentProfile_args&);
  InstrumentManager_uploadReagentProfile_args& operator=(const InstrumentManager_uploadReagentProfile_args&);
  InstrumentManager_uploadReagentProfile_args() {
  }

  virtual ~InstrumentManager_uploadReagentProfile_args() throw();
  std::vector<ReagentConfigItem>  configs;

  _InstrumentManager_uploadReagentProfile_args__isset __isset;

  void __set_configs(const std::vector<ReagentConfigItem> & val);

  bool operator == (const InstrumentManager_uploadReagentProfile_args & rhs) const
  {
    if (!(configs == rhs.configs))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadReagentProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadReagentProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadReagentProfile_pargs {
 public:


  virtual ~InstrumentManager_uploadReagentProfile_pargs() throw();
  const std::vector<ReagentConfigItem> * configs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadReagentProfile_result__isset {
  _InstrumentManager_uploadReagentProfile_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadReagentProfile_result__isset;

class InstrumentManager_uploadReagentProfile_result {
 public:

  InstrumentManager_uploadReagentProfile_result(const InstrumentManager_uploadReagentProfile_result&);
  InstrumentManager_uploadReagentProfile_result& operator=(const InstrumentManager_uploadReagentProfile_result&);
  InstrumentManager_uploadReagentProfile_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadReagentProfile_result() throw();
  bool success;

  _InstrumentManager_uploadReagentProfile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadReagentProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadReagentProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadReagentProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadReagentProfile_presult__isset {
  _InstrumentManager_uploadReagentProfile_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadReagentProfile_presult__isset;

class InstrumentManager_uploadReagentProfile_presult {
 public:


  virtual ~InstrumentManager_uploadReagentProfile_presult() throw();
  bool* success;

  _InstrumentManager_uploadReagentProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadConsumableProfile_args__isset {
  _InstrumentManager_uploadConsumableProfile_args__isset() : configs(false) {}
  bool configs :1;
} _InstrumentManager_uploadConsumableProfile_args__isset;

class InstrumentManager_uploadConsumableProfile_args {
 public:

  InstrumentManager_uploadConsumableProfile_args(const InstrumentManager_uploadConsumableProfile_args&);
  InstrumentManager_uploadConsumableProfile_args& operator=(const InstrumentManager_uploadConsumableProfile_args&);
  InstrumentManager_uploadConsumableProfile_args() {
  }

  virtual ~InstrumentManager_uploadConsumableProfile_args() throw();
  std::vector<ConsumableConfigItem>  configs;

  _InstrumentManager_uploadConsumableProfile_args__isset __isset;

  void __set_configs(const std::vector<ConsumableConfigItem> & val);

  bool operator == (const InstrumentManager_uploadConsumableProfile_args & rhs) const
  {
    if (!(configs == rhs.configs))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadConsumableProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadConsumableProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadConsumableProfile_pargs {
 public:


  virtual ~InstrumentManager_uploadConsumableProfile_pargs() throw();
  const std::vector<ConsumableConfigItem> * configs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadConsumableProfile_result__isset {
  _InstrumentManager_uploadConsumableProfile_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadConsumableProfile_result__isset;

class InstrumentManager_uploadConsumableProfile_result {
 public:

  InstrumentManager_uploadConsumableProfile_result(const InstrumentManager_uploadConsumableProfile_result&);
  InstrumentManager_uploadConsumableProfile_result& operator=(const InstrumentManager_uploadConsumableProfile_result&);
  InstrumentManager_uploadConsumableProfile_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadConsumableProfile_result() throw();
  bool success;

  _InstrumentManager_uploadConsumableProfile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadConsumableProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadConsumableProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadConsumableProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadConsumableProfile_presult__isset {
  _InstrumentManager_uploadConsumableProfile_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadConsumableProfile_presult__isset;

class InstrumentManager_uploadConsumableProfile_presult {
 public:


  virtual ~InstrumentManager_uploadConsumableProfile_presult() throw();
  bool* success;

  _InstrumentManager_uploadConsumableProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_updateReagentRemain_args__isset {
  _InstrumentManager_updateReagentRemain_args__isset() : remains(false) {}
  bool remains :1;
} _InstrumentManager_updateReagentRemain_args__isset;

class InstrumentManager_updateReagentRemain_args {
 public:

  InstrumentManager_updateReagentRemain_args(const InstrumentManager_updateReagentRemain_args&);
  InstrumentManager_updateReagentRemain_args& operator=(const InstrumentManager_updateReagentRemain_args&);
  InstrumentManager_updateReagentRemain_args() {
  }

  virtual ~InstrumentManager_updateReagentRemain_args() throw();
  std::vector<ReagentRemain>  remains;

  _InstrumentManager_updateReagentRemain_args__isset __isset;

  void __set_remains(const std::vector<ReagentRemain> & val);

  bool operator == (const InstrumentManager_updateReagentRemain_args & rhs) const
  {
    if (!(remains == rhs.remains))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateReagentRemain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateReagentRemain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_updateReagentRemain_pargs {
 public:


  virtual ~InstrumentManager_updateReagentRemain_pargs() throw();
  const std::vector<ReagentRemain> * remains;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateReagentRemain_result__isset {
  _InstrumentManager_updateReagentRemain_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateReagentRemain_result__isset;

class InstrumentManager_updateReagentRemain_result {
 public:

  InstrumentManager_updateReagentRemain_result(const InstrumentManager_updateReagentRemain_result&);
  InstrumentManager_updateReagentRemain_result& operator=(const InstrumentManager_updateReagentRemain_result&);
  InstrumentManager_updateReagentRemain_result() : success(0) {
  }

  virtual ~InstrumentManager_updateReagentRemain_result() throw();
  bool success;

  _InstrumentManager_updateReagentRemain_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_updateReagentRemain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateReagentRemain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateReagentRemain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateReagentRemain_presult__isset {
  _InstrumentManager_updateReagentRemain_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateReagentRemain_presult__isset;

class InstrumentManager_updateReagentRemain_presult {
 public:


  virtual ~InstrumentManager_updateReagentRemain_presult() throw();
  bool* success;

  _InstrumentManager_updateReagentRemain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadSignalProfile_args__isset {
  _InstrumentManager_uploadSignalProfile_args__isset() : profile(false) {}
  bool profile :1;
} _InstrumentManager_uploadSignalProfile_args__isset;

class InstrumentManager_uploadSignalProfile_args {
 public:

  InstrumentManager_uploadSignalProfile_args(const InstrumentManager_uploadSignalProfile_args&);
  InstrumentManager_uploadSignalProfile_args& operator=(const InstrumentManager_uploadSignalProfile_args&);
  InstrumentManager_uploadSignalProfile_args() {
  }

  virtual ~InstrumentManager_uploadSignalProfile_args() throw();
  Profile profile;

  _InstrumentManager_uploadSignalProfile_args__isset __isset;

  void __set_profile(const Profile& val);

  bool operator == (const InstrumentManager_uploadSignalProfile_args & rhs) const
  {
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadSignalProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadSignalProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadSignalProfile_pargs {
 public:


  virtual ~InstrumentManager_uploadSignalProfile_pargs() throw();
  const Profile* profile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadSignalProfile_result__isset {
  _InstrumentManager_uploadSignalProfile_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadSignalProfile_result__isset;

class InstrumentManager_uploadSignalProfile_result {
 public:

  InstrumentManager_uploadSignalProfile_result(const InstrumentManager_uploadSignalProfile_result&);
  InstrumentManager_uploadSignalProfile_result& operator=(const InstrumentManager_uploadSignalProfile_result&);
  InstrumentManager_uploadSignalProfile_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadSignalProfile_result() throw();
  bool success;

  _InstrumentManager_uploadSignalProfile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadSignalProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadSignalProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadSignalProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadSignalProfile_presult__isset {
  _InstrumentManager_uploadSignalProfile_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadSignalProfile_presult__isset;

class InstrumentManager_uploadSignalProfile_presult {
 public:


  virtual ~InstrumentManager_uploadSignalProfile_presult() throw();
  bool* success;

  _InstrumentManager_uploadSignalProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_updateSignals_args__isset {
  _InstrumentManager_updateSignals_args__isset() : signalList(false) {}
  bool signalList :1;
} _InstrumentManager_updateSignals_args__isset;

class InstrumentManager_updateSignals_args {
 public:

  InstrumentManager_updateSignals_args(const InstrumentManager_updateSignals_args&);
  InstrumentManager_updateSignals_args& operator=(const InstrumentManager_updateSignals_args&);
  InstrumentManager_updateSignals_args() {
  }

  virtual ~InstrumentManager_updateSignals_args() throw();
  std::vector<Signal>  signalList;

  _InstrumentManager_updateSignals_args__isset __isset;

  void __set_signalList(const std::vector<Signal> & val);

  bool operator == (const InstrumentManager_updateSignals_args & rhs) const
  {
    if (!(signalList == rhs.signalList))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateSignals_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateSignals_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_updateSignals_pargs {
 public:


  virtual ~InstrumentManager_updateSignals_pargs() throw();
  const std::vector<Signal> * signalList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateSignals_result__isset {
  _InstrumentManager_updateSignals_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateSignals_result__isset;

class InstrumentManager_updateSignals_result {
 public:

  InstrumentManager_updateSignals_result(const InstrumentManager_updateSignals_result&);
  InstrumentManager_updateSignals_result& operator=(const InstrumentManager_updateSignals_result&);
  InstrumentManager_updateSignals_result() : success(0) {
  }

  virtual ~InstrumentManager_updateSignals_result() throw();
  bool success;

  _InstrumentManager_updateSignals_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_updateSignals_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_updateSignals_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_updateSignals_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_updateSignals_presult__isset {
  _InstrumentManager_updateSignals_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_updateSignals_presult__isset;

class InstrumentManager_updateSignals_presult {
 public:


  virtual ~InstrumentManager_updateSignals_presult() throw();
  bool* success;

  _InstrumentManager_updateSignals_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadOperations_args__isset {
  _InstrumentManager_uploadOperations_args__isset() : ops(false) {}
  bool ops :1;
} _InstrumentManager_uploadOperations_args__isset;

class InstrumentManager_uploadOperations_args {
 public:

  InstrumentManager_uploadOperations_args(const InstrumentManager_uploadOperations_args&);
  InstrumentManager_uploadOperations_args& operator=(const InstrumentManager_uploadOperations_args&);
  InstrumentManager_uploadOperations_args() {
  }

  virtual ~InstrumentManager_uploadOperations_args() throw();
  std::vector<OperationSuit>  ops;

  _InstrumentManager_uploadOperations_args__isset __isset;

  void __set_ops(const std::vector<OperationSuit> & val);

  bool operator == (const InstrumentManager_uploadOperations_args & rhs) const
  {
    if (!(ops == rhs.ops))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadOperations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadOperations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadOperations_pargs {
 public:


  virtual ~InstrumentManager_uploadOperations_pargs() throw();
  const std::vector<OperationSuit> * ops;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadOperations_result__isset {
  _InstrumentManager_uploadOperations_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadOperations_result__isset;

class InstrumentManager_uploadOperations_result {
 public:

  InstrumentManager_uploadOperations_result(const InstrumentManager_uploadOperations_result&);
  InstrumentManager_uploadOperations_result& operator=(const InstrumentManager_uploadOperations_result&);
  InstrumentManager_uploadOperations_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadOperations_result() throw();
  bool success;

  _InstrumentManager_uploadOperations_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadOperations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadOperations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadOperations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadOperations_presult__isset {
  _InstrumentManager_uploadOperations_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadOperations_presult__isset;

class InstrumentManager_uploadOperations_presult {
 public:


  virtual ~InstrumentManager_uploadOperations_presult() throw();
  bool* success;

  _InstrumentManager_uploadOperations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_uploadDiagnoses_args__isset {
  _InstrumentManager_uploadDiagnoses_args__isset() : ops(false) {}
  bool ops :1;
} _InstrumentManager_uploadDiagnoses_args__isset;

class InstrumentManager_uploadDiagnoses_args {
 public:

  InstrumentManager_uploadDiagnoses_args(const InstrumentManager_uploadDiagnoses_args&);
  InstrumentManager_uploadDiagnoses_args& operator=(const InstrumentManager_uploadDiagnoses_args&);
  InstrumentManager_uploadDiagnoses_args() {
  }

  virtual ~InstrumentManager_uploadDiagnoses_args() throw();
  std::vector<DiagnosisSuit>  ops;

  _InstrumentManager_uploadDiagnoses_args__isset __isset;

  void __set_ops(const std::vector<DiagnosisSuit> & val);

  bool operator == (const InstrumentManager_uploadDiagnoses_args & rhs) const
  {
    if (!(ops == rhs.ops))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadDiagnoses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadDiagnoses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_uploadDiagnoses_pargs {
 public:


  virtual ~InstrumentManager_uploadDiagnoses_pargs() throw();
  const std::vector<DiagnosisSuit> * ops;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadDiagnoses_result__isset {
  _InstrumentManager_uploadDiagnoses_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadDiagnoses_result__isset;

class InstrumentManager_uploadDiagnoses_result {
 public:

  InstrumentManager_uploadDiagnoses_result(const InstrumentManager_uploadDiagnoses_result&);
  InstrumentManager_uploadDiagnoses_result& operator=(const InstrumentManager_uploadDiagnoses_result&);
  InstrumentManager_uploadDiagnoses_result() : success(0) {
  }

  virtual ~InstrumentManager_uploadDiagnoses_result() throw();
  bool success;

  _InstrumentManager_uploadDiagnoses_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_uploadDiagnoses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_uploadDiagnoses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_uploadDiagnoses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_uploadDiagnoses_presult__isset {
  _InstrumentManager_uploadDiagnoses_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_uploadDiagnoses_presult__isset;

class InstrumentManager_uploadDiagnoses_presult {
 public:


  virtual ~InstrumentManager_uploadDiagnoses_presult() throw();
  bool* success;

  _InstrumentManager_uploadDiagnoses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InstrumentManager_notifyDiagnosisResult_args__isset {
  _InstrumentManager_notifyDiagnosisResult_args__isset() : result(false) {}
  bool result :1;
} _InstrumentManager_notifyDiagnosisResult_args__isset;

class InstrumentManager_notifyDiagnosisResult_args {
 public:

  InstrumentManager_notifyDiagnosisResult_args(const InstrumentManager_notifyDiagnosisResult_args&);
  InstrumentManager_notifyDiagnosisResult_args& operator=(const InstrumentManager_notifyDiagnosisResult_args&);
  InstrumentManager_notifyDiagnosisResult_args() {
  }

  virtual ~InstrumentManager_notifyDiagnosisResult_args() throw();
  DiagnosisResult result;

  _InstrumentManager_notifyDiagnosisResult_args__isset __isset;

  void __set_result(const DiagnosisResult& val);

  bool operator == (const InstrumentManager_notifyDiagnosisResult_args & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_notifyDiagnosisResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_notifyDiagnosisResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InstrumentManager_notifyDiagnosisResult_pargs {
 public:


  virtual ~InstrumentManager_notifyDiagnosisResult_pargs() throw();
  const DiagnosisResult* result;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_notifyDiagnosisResult_result__isset {
  _InstrumentManager_notifyDiagnosisResult_result__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_notifyDiagnosisResult_result__isset;

class InstrumentManager_notifyDiagnosisResult_result {
 public:

  InstrumentManager_notifyDiagnosisResult_result(const InstrumentManager_notifyDiagnosisResult_result&);
  InstrumentManager_notifyDiagnosisResult_result& operator=(const InstrumentManager_notifyDiagnosisResult_result&);
  InstrumentManager_notifyDiagnosisResult_result() : success(0) {
  }

  virtual ~InstrumentManager_notifyDiagnosisResult_result() throw();
  bool success;

  _InstrumentManager_notifyDiagnosisResult_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const InstrumentManager_notifyDiagnosisResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InstrumentManager_notifyDiagnosisResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstrumentManager_notifyDiagnosisResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InstrumentManager_notifyDiagnosisResult_presult__isset {
  _InstrumentManager_notifyDiagnosisResult_presult__isset() : success(false) {}
  bool success :1;
} _InstrumentManager_notifyDiagnosisResult_presult__isset;

class InstrumentManager_notifyDiagnosisResult_presult {
 public:


  virtual ~InstrumentManager_notifyDiagnosisResult_presult() throw();
  bool* success;

  _InstrumentManager_notifyDiagnosisResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InstrumentManagerClient : virtual public InstrumentManagerIf {
 public:
  InstrumentManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InstrumentManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& data);
  void send_echo(const std::string& data);
  void recv_echo(std::string& _return);
  bool authenticate(const std::string& code);
  void send_authenticate(const std::string& code);
  bool recv_authenticate();
  int64_t getSystemTime();
  void send_getSystemTime();
  int64_t recv_getSystemTime();
  bool upload(const Instrument& instrument);
  void send_upload(const Instrument& instrument);
  bool recv_upload();
  bool uploadInstrumentPermissionLevel(const int32_t level);
  void send_uploadInstrumentPermissionLevel(const int32_t level);
  bool recv_uploadInstrumentPermissionLevel();
  bool alarm(const Alarm& alarm);
  void send_alarm(const Alarm& alarm);
  bool recv_alarm();
  bool updateStatus(const Status& status);
  void send_updateStatus(const Status& status);
  bool recv_updateStatus();
  bool updateAction(const Status& action);
  void send_updateAction(const Status& action);
  bool recv_updateAction();
  bool uploadMeasureData(const MeasureData& data);
  void send_uploadMeasureData(const MeasureData& data);
  bool recv_uploadMeasureData();
  bool uploadMeasureCurve(const MeasureCurve& curve);
  void send_uploadMeasureCurve(const MeasureCurve& curve);
  bool recv_uploadMeasureCurve();
  bool uploadSettingProfiles(const std::vector<Profile> & profilesList);
  void send_uploadSettingProfiles(const std::vector<Profile> & profilesList);
  bool recv_uploadSettingProfiles();
  bool updateConfigs(const std::vector<Config> & config);
  void send_updateConfigs(const std::vector<Config> & config);
  bool recv_updateConfigs();
  bool uploadReagentProfile(const std::vector<ReagentConfigItem> & configs);
  void send_uploadReagentProfile(const std::vector<ReagentConfigItem> & configs);
  bool recv_uploadReagentProfile();
  bool uploadConsumableProfile(const std::vector<ConsumableConfigItem> & configs);
  void send_uploadConsumableProfile(const std::vector<ConsumableConfigItem> & configs);
  bool recv_uploadConsumableProfile();
  bool updateReagentRemain(const std::vector<ReagentRemain> & remains);
  void send_updateReagentRemain(const std::vector<ReagentRemain> & remains);
  bool recv_updateReagentRemain();
  bool uploadSignalProfile(const Profile& profile);
  void send_uploadSignalProfile(const Profile& profile);
  bool recv_uploadSignalProfile();
  bool updateSignals(const std::vector<Signal> & signalList);
  void send_updateSignals(const std::vector<Signal> & signalList);
  bool recv_updateSignals();
  bool uploadOperations(const std::vector<OperationSuit> & ops);
  void send_uploadOperations(const std::vector<OperationSuit> & ops);
  bool recv_uploadOperations();
  bool uploadDiagnoses(const std::vector<DiagnosisSuit> & ops);
  void send_uploadDiagnoses(const std::vector<DiagnosisSuit> & ops);
  bool recv_uploadDiagnoses();
  bool notifyDiagnosisResult(const DiagnosisResult& result);
  void send_notifyDiagnosisResult(const DiagnosisResult& result);
  bool recv_notifyDiagnosisResult();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InstrumentManagerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<InstrumentManagerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (InstrumentManagerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authenticate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSystemTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadInstrumentPermissionLevel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alarm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateAction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadMeasureData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadMeasureCurve(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadSettingProfiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateConfigs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadReagentProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadConsumableProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateReagentRemain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadSignalProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSignals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadOperations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadDiagnoses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyDiagnosisResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InstrumentManagerProcessor(boost::shared_ptr<InstrumentManagerIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &InstrumentManagerProcessor::process_echo;
    processMap_["authenticate"] = &InstrumentManagerProcessor::process_authenticate;
    processMap_["getSystemTime"] = &InstrumentManagerProcessor::process_getSystemTime;
    processMap_["upload"] = &InstrumentManagerProcessor::process_upload;
    processMap_["uploadInstrumentPermissionLevel"] = &InstrumentManagerProcessor::process_uploadInstrumentPermissionLevel;
    processMap_["alarm"] = &InstrumentManagerProcessor::process_alarm;
    processMap_["updateStatus"] = &InstrumentManagerProcessor::process_updateStatus;
    processMap_["updateAction"] = &InstrumentManagerProcessor::process_updateAction;
    processMap_["uploadMeasureData"] = &InstrumentManagerProcessor::process_uploadMeasureData;
    processMap_["uploadMeasureCurve"] = &InstrumentManagerProcessor::process_uploadMeasureCurve;
    processMap_["uploadSettingProfiles"] = &InstrumentManagerProcessor::process_uploadSettingProfiles;
    processMap_["updateConfigs"] = &InstrumentManagerProcessor::process_updateConfigs;
    processMap_["uploadReagentProfile"] = &InstrumentManagerProcessor::process_uploadReagentProfile;
    processMap_["uploadConsumableProfile"] = &InstrumentManagerProcessor::process_uploadConsumableProfile;
    processMap_["updateReagentRemain"] = &InstrumentManagerProcessor::process_updateReagentRemain;
    processMap_["uploadSignalProfile"] = &InstrumentManagerProcessor::process_uploadSignalProfile;
    processMap_["updateSignals"] = &InstrumentManagerProcessor::process_updateSignals;
    processMap_["uploadOperations"] = &InstrumentManagerProcessor::process_uploadOperations;
    processMap_["uploadDiagnoses"] = &InstrumentManagerProcessor::process_uploadDiagnoses;
    processMap_["notifyDiagnosisResult"] = &InstrumentManagerProcessor::process_notifyDiagnosisResult;
  }

  virtual ~InstrumentManagerProcessor() {}
};

class InstrumentManagerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InstrumentManagerProcessorFactory(const ::boost::shared_ptr< InstrumentManagerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< InstrumentManagerIfFactory > handlerFactory_;
};

class InstrumentManagerMultiface : virtual public InstrumentManagerIf {
 public:
  InstrumentManagerMultiface(std::vector<boost::shared_ptr<InstrumentManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InstrumentManagerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InstrumentManagerIf> > ifaces_;
  InstrumentManagerMultiface() {}
  void add(boost::shared_ptr<InstrumentManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo(_return, data);
    }
    ifaces_[i]->echo(_return, data);
    return;
  }

  bool authenticate(const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authenticate(code);
    }
    return ifaces_[i]->authenticate(code);
  }

  int64_t getSystemTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSystemTime();
    }
    return ifaces_[i]->getSystemTime();
  }

  bool upload(const Instrument& instrument) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload(instrument);
    }
    return ifaces_[i]->upload(instrument);
  }

  bool uploadInstrumentPermissionLevel(const int32_t level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadInstrumentPermissionLevel(level);
    }
    return ifaces_[i]->uploadInstrumentPermissionLevel(level);
  }

  bool alarm(const Alarm& alarm) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alarm(alarm);
    }
    return ifaces_[i]->alarm(alarm);
  }

  bool updateStatus(const Status& status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateStatus(status);
    }
    return ifaces_[i]->updateStatus(status);
  }

  bool updateAction(const Status& action) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateAction(action);
    }
    return ifaces_[i]->updateAction(action);
  }

  bool uploadMeasureData(const MeasureData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadMeasureData(data);
    }
    return ifaces_[i]->uploadMeasureData(data);
  }

  bool uploadMeasureCurve(const MeasureCurve& curve) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadMeasureCurve(curve);
    }
    return ifaces_[i]->uploadMeasureCurve(curve);
  }

  bool uploadSettingProfiles(const std::vector<Profile> & profilesList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadSettingProfiles(profilesList);
    }
    return ifaces_[i]->uploadSettingProfiles(profilesList);
  }

  bool updateConfigs(const std::vector<Config> & config) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateConfigs(config);
    }
    return ifaces_[i]->updateConfigs(config);
  }

  bool uploadReagentProfile(const std::vector<ReagentConfigItem> & configs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadReagentProfile(configs);
    }
    return ifaces_[i]->uploadReagentProfile(configs);
  }

  bool uploadConsumableProfile(const std::vector<ConsumableConfigItem> & configs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadConsumableProfile(configs);
    }
    return ifaces_[i]->uploadConsumableProfile(configs);
  }

  bool updateReagentRemain(const std::vector<ReagentRemain> & remains) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateReagentRemain(remains);
    }
    return ifaces_[i]->updateReagentRemain(remains);
  }

  bool uploadSignalProfile(const Profile& profile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadSignalProfile(profile);
    }
    return ifaces_[i]->uploadSignalProfile(profile);
  }

  bool updateSignals(const std::vector<Signal> & signalList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSignals(signalList);
    }
    return ifaces_[i]->updateSignals(signalList);
  }

  bool uploadOperations(const std::vector<OperationSuit> & ops) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadOperations(ops);
    }
    return ifaces_[i]->uploadOperations(ops);
  }

  bool uploadDiagnoses(const std::vector<DiagnosisSuit> & ops) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadDiagnoses(ops);
    }
    return ifaces_[i]->uploadDiagnoses(ops);
  }

  bool notifyDiagnosisResult(const DiagnosisResult& result) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyDiagnosisResult(result);
    }
    return ifaces_[i]->notifyDiagnosisResult(result);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class InstrumentManagerConcurrentClient : virtual public InstrumentManagerIf {
 public:
  InstrumentManagerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InstrumentManagerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& data);
  int32_t send_echo(const std::string& data);
  void recv_echo(std::string& _return, const int32_t seqid);
  bool authenticate(const std::string& code);
  int32_t send_authenticate(const std::string& code);
  bool recv_authenticate(const int32_t seqid);
  int64_t getSystemTime();
  int32_t send_getSystemTime();
  int64_t recv_getSystemTime(const int32_t seqid);
  bool upload(const Instrument& instrument);
  int32_t send_upload(const Instrument& instrument);
  bool recv_upload(const int32_t seqid);
  bool uploadInstrumentPermissionLevel(const int32_t level);
  int32_t send_uploadInstrumentPermissionLevel(const int32_t level);
  bool recv_uploadInstrumentPermissionLevel(const int32_t seqid);
  bool alarm(const Alarm& alarm);
  int32_t send_alarm(const Alarm& alarm);
  bool recv_alarm(const int32_t seqid);
  bool updateStatus(const Status& status);
  int32_t send_updateStatus(const Status& status);
  bool recv_updateStatus(const int32_t seqid);
  bool updateAction(const Status& action);
  int32_t send_updateAction(const Status& action);
  bool recv_updateAction(const int32_t seqid);
  bool uploadMeasureData(const MeasureData& data);
  int32_t send_uploadMeasureData(const MeasureData& data);
  bool recv_uploadMeasureData(const int32_t seqid);
  bool uploadMeasureCurve(const MeasureCurve& curve);
  int32_t send_uploadMeasureCurve(const MeasureCurve& curve);
  bool recv_uploadMeasureCurve(const int32_t seqid);
  bool uploadSettingProfiles(const std::vector<Profile> & profilesList);
  int32_t send_uploadSettingProfiles(const std::vector<Profile> & profilesList);
  bool recv_uploadSettingProfiles(const int32_t seqid);
  bool updateConfigs(const std::vector<Config> & config);
  int32_t send_updateConfigs(const std::vector<Config> & config);
  bool recv_updateConfigs(const int32_t seqid);
  bool uploadReagentProfile(const std::vector<ReagentConfigItem> & configs);
  int32_t send_uploadReagentProfile(const std::vector<ReagentConfigItem> & configs);
  bool recv_uploadReagentProfile(const int32_t seqid);
  bool uploadConsumableProfile(const std::vector<ConsumableConfigItem> & configs);
  int32_t send_uploadConsumableProfile(const std::vector<ConsumableConfigItem> & configs);
  bool recv_uploadConsumableProfile(const int32_t seqid);
  bool updateReagentRemain(const std::vector<ReagentRemain> & remains);
  int32_t send_updateReagentRemain(const std::vector<ReagentRemain> & remains);
  bool recv_updateReagentRemain(const int32_t seqid);
  bool uploadSignalProfile(const Profile& profile);
  int32_t send_uploadSignalProfile(const Profile& profile);
  bool recv_uploadSignalProfile(const int32_t seqid);
  bool updateSignals(const std::vector<Signal> & signalList);
  int32_t send_updateSignals(const std::vector<Signal> & signalList);
  bool recv_updateSignals(const int32_t seqid);
  bool uploadOperations(const std::vector<OperationSuit> & ops);
  int32_t send_uploadOperations(const std::vector<OperationSuit> & ops);
  bool recv_uploadOperations(const int32_t seqid);
  bool uploadDiagnoses(const std::vector<DiagnosisSuit> & ops);
  int32_t send_uploadDiagnoses(const std::vector<DiagnosisSuit> & ops);
  bool recv_uploadDiagnoses(const int32_t seqid);
  bool notifyDiagnosisResult(const DiagnosisResult& result);
  int32_t send_notifyDiagnosisResult(const DiagnosisResult& result);
  bool recv_notifyDiagnosisResult(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

//#ifdef _WIN32
//  #pragma warning( pop )
//#endif

}}}} // namespace

#endif
