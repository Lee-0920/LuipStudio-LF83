/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InstrumentManager_TYPES_H
#define InstrumentManager_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Interface { namespace Wqimc { namespace Api { namespace Manager {

struct MeasureMode {
  enum type {
    Online = 0,
    Offine = 1
  };
};

extern const std::map<int, const char*> _MeasureMode_VALUES_TO_NAMES;

struct DataType {
  enum type {
    Bool = 0,
    Option = 1,
    Int = 2,
    Float = 3,
    String = 4,
    IntArray = 5,
    Byte = 6,
    Short = 7,
    Long = 8,
    Double = 9
  };
};

extern const std::map<int, const char*> _DataType_VALUES_TO_NAMES;

struct RoleType {
  enum type {
    Guest = 1,
    Administrator = 2,
    Engineer = 3,
    Super = 4
  };
};

extern const std::map<int, const char*> _RoleType_VALUES_TO_NAMES;

class Authorization;

class Instrument;

class CircuitBoard;

class Status;

class Alarm;

class MeasureData;

class MeasureItem;

class MeasureCurve;

class MeasureWaveform;

class Profile;

class ConfigGrop;

class ConfigItem;

class Config;

class ConsumableConfigItem;

class ReagentConfigItem;

class ReagentRemain;

class Signal;

class OperationSuit;

class OperationGroup;

class OperationItem;

class OperationParam;

class DiagnosisSuit;

class DiagnosisGroup;

class DiagnosisItem;

class DiagnosisResult;

typedef struct _Authorization__isset {
  _Authorization__isset() : name(false), expirationDate(false) {}
  bool name :1;
  bool expirationDate :1;
} _Authorization__isset;

class Authorization : public virtual ::apache::thrift::TBase {
 public:

  Authorization(const Authorization&);
  Authorization& operator=(const Authorization&);
  Authorization() : name(), expirationDate(0) {
  }

  virtual ~Authorization() throw();
  std::string name;
  int64_t expirationDate;

  _Authorization__isset __isset;

  void __set_name(const std::string& val);

  void __set_expirationDate(const int64_t val);

  bool operator == (const Authorization & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(expirationDate == rhs.expirationDate))
      return false;
    return true;
  }
  bool operator != (const Authorization &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Authorization & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Authorization &a, Authorization &b);

inline std::ostream& operator<<(std::ostream& out, const Authorization& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Instrument__isset {
  _Instrument__isset() : uuid(false), name(false), type(false), model(false), sn(false), version(false), targets(false), manufacturer(false), authorization(false), circuitBoards(false), platformVersion(false), unit(false), proportion(false), waveType(false) {}
  bool uuid :1;
  bool name :1;
  bool type :1;
  bool model :1;
  bool sn :1;
  bool version :1;
  bool targets :1;
  bool manufacturer :1;
  bool authorization :1;
  bool circuitBoards :1;
  bool platformVersion :1;
  bool unit :1;
  bool proportion :1;
  bool waveType :1;
} _Instrument__isset;

class Instrument : public virtual ::apache::thrift::TBase {
 public:

  Instrument(const Instrument&);
  Instrument& operator=(const Instrument&);
  Instrument() : uuid(), name(), type(), model(), sn(), version(), manufacturer(), platformVersion(), unit(), proportion(0), waveType() {
  }

  virtual ~Instrument() throw();
  std::string uuid;
  std::string name;
  std::string type;
  std::string model;
  std::string sn;
  std::string version;
  std::vector<std::string>  targets;
  std::string manufacturer;
  Authorization authorization;
  std::vector<CircuitBoard>  circuitBoards;
  std::string platformVersion;
  std::string unit;
  double proportion;
  std::string waveType;

  _Instrument__isset __isset;

  void __set_uuid(const std::string& val);

  void __set_name(const std::string& val);

  void __set_type(const std::string& val);

  void __set_model(const std::string& val);

  void __set_sn(const std::string& val);

  void __set_version(const std::string& val);

  void __set_targets(const std::vector<std::string> & val);

  void __set_manufacturer(const std::string& val);

  void __set_authorization(const Authorization& val);

  void __set_circuitBoards(const std::vector<CircuitBoard> & val);

  void __set_platformVersion(const std::string& val);

  void __set_unit(const std::string& val);

  void __set_proportion(const double val);

  void __set_waveType(const std::string& val);

  bool operator == (const Instrument & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(sn == rhs.sn))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(targets == rhs.targets))
      return false;
    if (!(manufacturer == rhs.manufacturer))
      return false;
    if (!(authorization == rhs.authorization))
      return false;
    if (!(circuitBoards == rhs.circuitBoards))
      return false;
    if (!(platformVersion == rhs.platformVersion))
      return false;
    if (__isset.unit != rhs.__isset.unit)
      return false;
    else if (__isset.unit && !(unit == rhs.unit))
      return false;
    if (__isset.proportion != rhs.__isset.proportion)
      return false;
    else if (__isset.proportion && !(proportion == rhs.proportion))
      return false;
    if (__isset.waveType != rhs.__isset.waveType)
      return false;
    else if (__isset.waveType && !(waveType == rhs.waveType))
      return false;
    return true;
  }
  bool operator != (const Instrument &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Instrument & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Instrument &a, Instrument &b);

inline std::ostream& operator<<(std::ostream& out, const Instrument& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CircuitBoard__isset {
  _CircuitBoard__isset() : name(false), type(false), model(false), sn(false), manufacturer(false), manufDate(false), softwareVersion(false), hardwareVersion(false), kernelVersion(false), fileSystemVersion(false) {}
  bool name :1;
  bool type :1;
  bool model :1;
  bool sn :1;
  bool manufacturer :1;
  bool manufDate :1;
  bool softwareVersion :1;
  bool hardwareVersion :1;
  bool kernelVersion :1;
  bool fileSystemVersion :1;
} _CircuitBoard__isset;

class CircuitBoard : public virtual ::apache::thrift::TBase {
 public:

  CircuitBoard(const CircuitBoard&);
  CircuitBoard& operator=(const CircuitBoard&);
  CircuitBoard() : name(), type(), model(), sn(), manufacturer(), manufDate(), softwareVersion(), hardwareVersion(), kernelVersion(), fileSystemVersion() {
  }

  virtual ~CircuitBoard() throw();
  std::string name;
  std::string type;
  std::string model;
  std::string sn;
  std::string manufacturer;
  std::string manufDate;
  std::string softwareVersion;
  std::string hardwareVersion;
  std::string kernelVersion;
  std::string fileSystemVersion;

  _CircuitBoard__isset __isset;

  void __set_name(const std::string& val);

  void __set_type(const std::string& val);

  void __set_model(const std::string& val);

  void __set_sn(const std::string& val);

  void __set_manufacturer(const std::string& val);

  void __set_manufDate(const std::string& val);

  void __set_softwareVersion(const std::string& val);

  void __set_hardwareVersion(const std::string& val);

  void __set_kernelVersion(const std::string& val);

  void __set_fileSystemVersion(const std::string& val);

  bool operator == (const CircuitBoard & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(sn == rhs.sn))
      return false;
    if (!(manufacturer == rhs.manufacturer))
      return false;
    if (!(manufDate == rhs.manufDate))
      return false;
    if (!(softwareVersion == rhs.softwareVersion))
      return false;
    if (!(hardwareVersion == rhs.hardwareVersion))
      return false;
    if (!(kernelVersion == rhs.kernelVersion))
      return false;
    if (!(fileSystemVersion == rhs.fileSystemVersion))
      return false;
    return true;
  }
  bool operator != (const CircuitBoard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CircuitBoard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CircuitBoard &a, CircuitBoard &b);

inline std::ostream& operator<<(std::ostream& out, const CircuitBoard& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Status__isset {
  _Status__isset() : time(false), name(false), text(false), duration(false) {}
  bool time :1;
  bool name :1;
  bool text :1;
  bool duration :1;
} _Status__isset;

class Status : public virtual ::apache::thrift::TBase {
 public:

  Status(const Status&);
  Status& operator=(const Status&);
  Status() : time(0), name(), text(), duration(0) {
  }

  virtual ~Status() throw();
  int64_t time;
  std::string name;
  std::string text;
  double duration;

  _Status__isset __isset;

  void __set_time(const int64_t val);

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_duration(const double val);

  bool operator == (const Status & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(duration == rhs.duration))
      return false;
    return true;
  }
  bool operator != (const Status &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Status & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Status &a, Status &b);

inline std::ostream& operator<<(std::ostream& out, const Status& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Alarm__isset {
  _Alarm__isset() : time(false), level(false), type(false), name(false), cause(false) {}
  bool time :1;
  bool level :1;
  bool type :1;
  bool name :1;
  bool cause :1;
} _Alarm__isset;

class Alarm : public virtual ::apache::thrift::TBase {
 public:

  Alarm(const Alarm&);
  Alarm& operator=(const Alarm&);
  Alarm() : time(0), level(), type(), name(), cause() {
  }

  virtual ~Alarm() throw();
  int64_t time;
  std::string level;
  std::string type;
  std::string name;
  std::string cause;

  _Alarm__isset __isset;

  void __set_time(const int64_t val);

  void __set_level(const std::string& val);

  void __set_type(const std::string& val);

  void __set_name(const std::string& val);

  void __set_cause(const std::string& val);

  bool operator == (const Alarm & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(cause == rhs.cause))
      return false;
    return true;
  }
  bool operator != (const Alarm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Alarm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Alarm &a, Alarm &b);

inline std::ostream& operator<<(std::ostream& out, const Alarm& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MeasureData__isset {
  _MeasureData__isset() : time(false), result(false), mode(false), type(false), target(false), optionals(false), waveforms(false), resultFormat(false) {}
  bool time :1;
  bool result :1;
  bool mode :1;
  bool type :1;
  bool target :1;
  bool optionals :1;
  bool waveforms :1;
  bool resultFormat :1;
} _MeasureData__isset;

class MeasureData : public virtual ::apache::thrift::TBase {
 public:

  MeasureData(const MeasureData&);
  MeasureData& operator=(const MeasureData&);
  MeasureData() : time(0), result(0), mode(0), type(), target(), resultFormat() {
  }

  virtual ~MeasureData() throw();
  int64_t time;
  double result;
  int32_t mode;
  std::string type;
  std::string target;
  std::vector<MeasureItem>  optionals;
  std::vector<MeasureWaveform>  waveforms;
  std::string resultFormat;

  _MeasureData__isset __isset;

  void __set_time(const int64_t val);

  void __set_result(const double val);

  void __set_mode(const int32_t val);

  void __set_type(const std::string& val);

  void __set_target(const std::string& val);

  void __set_optionals(const std::vector<MeasureItem> & val);

  void __set_waveforms(const std::vector<MeasureWaveform> & val);

  void __set_resultFormat(const std::string& val);

  bool operator == (const MeasureData & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(optionals == rhs.optionals))
      return false;
    if (!(waveforms == rhs.waveforms))
      return false;
    if (!(resultFormat == rhs.resultFormat))
      return false;
    return true;
  }
  bool operator != (const MeasureData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeasureData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MeasureData &a, MeasureData &b);

inline std::ostream& operator<<(std::ostream& out, const MeasureData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MeasureItem__isset {
  _MeasureItem__isset() : name(false), value(false), unit(false) {}
  bool name :1;
  bool value :1;
  bool unit :1;
} _MeasureItem__isset;

class MeasureItem : public virtual ::apache::thrift::TBase {
 public:

  MeasureItem(const MeasureItem&);
  MeasureItem& operator=(const MeasureItem&);
  MeasureItem() : name(), value(), unit() {
  }

  virtual ~MeasureItem() throw();
  std::string name;
  std::string value;
  std::string unit;

  _MeasureItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_value(const std::string& val);

  void __set_unit(const std::string& val);

  bool operator == (const MeasureItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const MeasureItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeasureItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MeasureItem &a, MeasureItem &b);

inline std::ostream& operator<<(std::ostream& out, const MeasureItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MeasureCurve__isset {
  _MeasureCurve__isset() : time(false), k(false), b(false), curve(false), optionals(false), waveforms(false), target(false), resultFormat(false) {}
  bool time :1;
  bool k :1;
  bool b :1;
  bool curve :1;
  bool optionals :1;
  bool waveforms :1;
  bool target :1;
  bool resultFormat :1;
} _MeasureCurve__isset;

class MeasureCurve : public virtual ::apache::thrift::TBase {
 public:

  MeasureCurve(const MeasureCurve&);
  MeasureCurve& operator=(const MeasureCurve&);
  MeasureCurve() : time(0), k(0), b(0), curve(), target(), resultFormat() {
  }

  virtual ~MeasureCurve() throw();
  int64_t time;
  double k;
  double b;
  std::string curve;
  std::vector<MeasureItem>  optionals;
  std::vector<MeasureWaveform>  waveforms;
  std::string target;
  std::string resultFormat;

  _MeasureCurve__isset __isset;

  void __set_time(const int64_t val);

  void __set_k(const double val);

  void __set_b(const double val);

  void __set_curve(const std::string& val);

  void __set_optionals(const std::vector<MeasureItem> & val);

  void __set_waveforms(const std::vector<MeasureWaveform> & val);

  void __set_target(const std::string& val);

  void __set_resultFormat(const std::string& val);

  bool operator == (const MeasureCurve & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(k == rhs.k))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(curve == rhs.curve))
      return false;
    if (!(optionals == rhs.optionals))
      return false;
    if (!(waveforms == rhs.waveforms))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(resultFormat == rhs.resultFormat))
      return false;
    return true;
  }
  bool operator != (const MeasureCurve &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeasureCurve & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MeasureCurve &a, MeasureCurve &b);

inline std::ostream& operator<<(std::ostream& out, const MeasureCurve& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MeasureWaveform__isset {
  _MeasureWaveform__isset() : name(false), sampleRate(false), sampleNum(false), sampleType(false), xBegin(false), xInterval(false), xUnit(false), yUnit(false), samples(false) {}
  bool name :1;
  bool sampleRate :1;
  bool sampleNum :1;
  bool sampleType :1;
  bool xBegin :1;
  bool xInterval :1;
  bool xUnit :1;
  bool yUnit :1;
  bool samples :1;
} _MeasureWaveform__isset;

class MeasureWaveform : public virtual ::apache::thrift::TBase {
 public:

  MeasureWaveform(const MeasureWaveform&);
  MeasureWaveform& operator=(const MeasureWaveform&);
  MeasureWaveform() : name(), sampleRate(0), sampleNum(0), sampleType((DataType::type)0), xBegin(0), xInterval(0), xUnit(), yUnit(), samples() {
  }

  virtual ~MeasureWaveform() throw();
  std::string name;
  double sampleRate;
  int32_t sampleNum;
  DataType::type sampleType;
  double xBegin;
  double xInterval;
  std::string xUnit;
  std::string yUnit;
  std::string samples;

  _MeasureWaveform__isset __isset;

  void __set_name(const std::string& val);

  void __set_sampleRate(const double val);

  void __set_sampleNum(const int32_t val);

  void __set_sampleType(const DataType::type val);

  void __set_xBegin(const double val);

  void __set_xInterval(const double val);

  void __set_xUnit(const std::string& val);

  void __set_yUnit(const std::string& val);

  void __set_samples(const std::string& val);

  bool operator == (const MeasureWaveform & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(sampleRate == rhs.sampleRate))
      return false;
    if (!(sampleNum == rhs.sampleNum))
      return false;
    if (!(sampleType == rhs.sampleType))
      return false;
    if (!(xBegin == rhs.xBegin))
      return false;
    if (!(xInterval == rhs.xInterval))
      return false;
    if (!(xUnit == rhs.xUnit))
      return false;
    if (!(yUnit == rhs.yUnit))
      return false;
    if (!(samples == rhs.samples))
      return false;
    return true;
  }
  bool operator != (const MeasureWaveform &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeasureWaveform & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MeasureWaveform &a, MeasureWaveform &b);

inline std::ostream& operator<<(std::ostream& out, const MeasureWaveform& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Profile__isset {
  _Profile__isset() : name(false), text(false), groups(false), writePrivilege(false), readPrivilege(false) {}
  bool name :1;
  bool text :1;
  bool groups :1;
  bool writePrivilege :1;
  bool readPrivilege :1;
} _Profile__isset;

class Profile : public virtual ::apache::thrift::TBase {
 public:

  Profile(const Profile&);
  Profile& operator=(const Profile&);
  Profile() : name(), text(), writePrivilege((RoleType::type)0), readPrivilege((RoleType::type)0) {
  }

  virtual ~Profile() throw();
  std::string name;
  std::string text;
  std::vector<ConfigGrop>  groups;
  RoleType::type writePrivilege;
  RoleType::type readPrivilege;

  _Profile__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_groups(const std::vector<ConfigGrop> & val);

  void __set_writePrivilege(const RoleType::type val);

  void __set_readPrivilege(const RoleType::type val);

  bool operator == (const Profile & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(writePrivilege == rhs.writePrivilege))
      return false;
    if (!(readPrivilege == rhs.readPrivilege))
      return false;
    return true;
  }
  bool operator != (const Profile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Profile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Profile &a, Profile &b);

inline std::ostream& operator<<(std::ostream& out, const Profile& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ConfigGrop__isset {
  _ConfigGrop__isset() : name(false), text(false), configs(false) {}
  bool name :1;
  bool text :1;
  bool configs :1;
} _ConfigGrop__isset;

class ConfigGrop : public virtual ::apache::thrift::TBase {
 public:

  ConfigGrop(const ConfigGrop&);
  ConfigGrop& operator=(const ConfigGrop&);
  ConfigGrop() : name(), text() {
  }

  virtual ~ConfigGrop() throw();
  std::string name;
  std::string text;
  std::vector<ConfigItem>  configs;

  _ConfigGrop__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_configs(const std::vector<ConfigItem> & val);

  bool operator == (const ConfigGrop & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(configs == rhs.configs))
      return false;
    return true;
  }
  bool operator != (const ConfigGrop &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigGrop & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ConfigGrop &a, ConfigGrop &b);

inline std::ostream& operator<<(std::ostream& out, const ConfigGrop& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ConfigItem__isset {
  _ConfigItem__isset() : name(false), text(false), type(false), unit(false), writePrivilege(false), readPrivilege(false), options(false), value(false), format(false) {}
  bool name :1;
  bool text :1;
  bool type :1;
  bool unit :1;
  bool writePrivilege :1;
  bool readPrivilege :1;
  bool options :1;
  bool value :1;
  bool format :1;
} _ConfigItem__isset;

class ConfigItem : public virtual ::apache::thrift::TBase {
 public:

  ConfigItem(const ConfigItem&);
  ConfigItem& operator=(const ConfigItem&);
  ConfigItem() : name(), text(), type((DataType::type)0), unit(), writePrivilege((RoleType::type)0), readPrivilege((RoleType::type)0), value(), format() {
  }

  virtual ~ConfigItem() throw();
  std::string name;
  std::string text;
  DataType::type type;
  std::string unit;
  RoleType::type writePrivilege;
  RoleType::type readPrivilege;
  std::vector<std::string>  options;
  std::string value;
  std::string format;

  _ConfigItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_type(const DataType::type val);

  void __set_unit(const std::string& val);

  void __set_writePrivilege(const RoleType::type val);

  void __set_readPrivilege(const RoleType::type val);

  void __set_options(const std::vector<std::string> & val);

  void __set_value(const std::string& val);

  void __set_format(const std::string& val);

  bool operator == (const ConfigItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(writePrivilege == rhs.writePrivilege))
      return false;
    if (!(readPrivilege == rhs.readPrivilege))
      return false;
    if (!(options == rhs.options))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(format == rhs.format))
      return false;
    return true;
  }
  bool operator != (const ConfigItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ConfigItem &a, ConfigItem &b);

inline std::ostream& operator<<(std::ostream& out, const ConfigItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Config__isset {
  _Config__isset() : profile(false), config(false), value(false) {}
  bool profile :1;
  bool config :1;
  bool value :1;
} _Config__isset;

class Config : public virtual ::apache::thrift::TBase {
 public:

  Config(const Config&);
  Config& operator=(const Config&);
  Config() : profile(), config(), value() {
  }

  virtual ~Config() throw();
  std::string profile;
  std::string config;
  std::string value;

  _Config__isset __isset;

  void __set_profile(const std::string& val);

  void __set_config(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const Config & rhs) const
  {
    if (!(profile == rhs.profile))
      return false;
    if (!(config == rhs.config))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Config &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Config & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Config &a, Config &b);

inline std::ostream& operator<<(std::ostream& out, const Config& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ConsumableConfigItem__isset {
  _ConsumableConfigItem__isset() : name(false), text(false), cycle(false), lastTime(false) {}
  bool name :1;
  bool text :1;
  bool cycle :1;
  bool lastTime :1;
} _ConsumableConfigItem__isset;

class ConsumableConfigItem : public virtual ::apache::thrift::TBase {
 public:

  ConsumableConfigItem(const ConsumableConfigItem&);
  ConsumableConfigItem& operator=(const ConsumableConfigItem&);
  ConsumableConfigItem() : name(), text(), cycle(0), lastTime(0) {
  }

  virtual ~ConsumableConfigItem() throw();
  std::string name;
  std::string text;
  double cycle;
  int64_t lastTime;

  _ConsumableConfigItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_cycle(const double val);

  void __set_lastTime(const int64_t val);

  bool operator == (const ConsumableConfigItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(cycle == rhs.cycle))
      return false;
    if (!(lastTime == rhs.lastTime))
      return false;
    return true;
  }
  bool operator != (const ConsumableConfigItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumableConfigItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ConsumableConfigItem &a, ConsumableConfigItem &b);

inline std::ostream& operator<<(std::ostream& out, const ConsumableConfigItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ReagentConfigItem__isset {
  _ReagentConfigItem__isset() : totalVolume(false), remainVolume(false), name(false), text(false), cycle(false), lastTime(false) {}
  bool totalVolume :1;
  bool remainVolume :1;
  bool name :1;
  bool text :1;
  bool cycle :1;
  bool lastTime :1;
} _ReagentConfigItem__isset;

class ReagentConfigItem : public virtual ::apache::thrift::TBase {
 public:

  ReagentConfigItem(const ReagentConfigItem&);
  ReagentConfigItem& operator=(const ReagentConfigItem&);
  ReagentConfigItem() : totalVolume(0), remainVolume(0), name(), text(), cycle(0), lastTime(0) {
  }

  virtual ~ReagentConfigItem() throw();
  double totalVolume;
  double remainVolume;
  std::string name;
  std::string text;
  double cycle;
  int64_t lastTime;

  _ReagentConfigItem__isset __isset;

  void __set_totalVolume(const double val);

  void __set_remainVolume(const double val);

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_cycle(const double val);

  void __set_lastTime(const int64_t val);

  bool operator == (const ReagentConfigItem & rhs) const
  {
    if (!(totalVolume == rhs.totalVolume))
      return false;
    if (!(remainVolume == rhs.remainVolume))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(cycle == rhs.cycle))
      return false;
    if (!(lastTime == rhs.lastTime))
      return false;
    return true;
  }
  bool operator != (const ReagentConfigItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReagentConfigItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReagentConfigItem &a, ReagentConfigItem &b);

inline std::ostream& operator<<(std::ostream& out, const ReagentConfigItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ReagentRemain__isset {
  _ReagentRemain__isset() : name(false), volume(false) {}
  bool name :1;
  bool volume :1;
} _ReagentRemain__isset;

class ReagentRemain : public virtual ::apache::thrift::TBase {
 public:

  ReagentRemain(const ReagentRemain&);
  ReagentRemain& operator=(const ReagentRemain&);
  ReagentRemain() : name(), volume(0) {
  }

  virtual ~ReagentRemain() throw();
  std::string name;
  double volume;

  _ReagentRemain__isset __isset;

  void __set_name(const std::string& val);

  void __set_volume(const double val);

  bool operator == (const ReagentRemain & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(volume == rhs.volume))
      return false;
    return true;
  }
  bool operator != (const ReagentRemain &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReagentRemain & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReagentRemain &a, ReagentRemain &b);

inline std::ostream& operator<<(std::ostream& out, const ReagentRemain& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Signal__isset {
  _Signal__isset() : name(false), value(false) {}
  bool name :1;
  bool value :1;
} _Signal__isset;

class Signal : public virtual ::apache::thrift::TBase {
 public:

  Signal(const Signal&);
  Signal& operator=(const Signal&);
  Signal() : name(), value(0) {
  }

  virtual ~Signal() throw();
  std::string name;
  double value;

  _Signal__isset __isset;

  void __set_name(const std::string& val);

  void __set_value(const double val);

  bool operator == (const Signal & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Signal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Signal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Signal &a, Signal &b);

inline std::ostream& operator<<(std::ostream& out, const Signal& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _OperationSuit__isset {
  _OperationSuit__isset() : name(false), text(false), groups(false), params(false), writePrivilege(false), readPrivilege(false) {}
  bool name :1;
  bool text :1;
  bool groups :1;
  bool params :1;
  bool writePrivilege :1;
  bool readPrivilege :1;
} _OperationSuit__isset;

class OperationSuit : public virtual ::apache::thrift::TBase {
 public:

  OperationSuit(const OperationSuit&);
  OperationSuit& operator=(const OperationSuit&);
  OperationSuit() : name(), text(), writePrivilege((RoleType::type)0), readPrivilege((RoleType::type)0) {
  }

  virtual ~OperationSuit() throw();
  std::string name;
  std::string text;
  std::vector<OperationGroup>  groups;
  std::vector<OperationParam>  params;
  RoleType::type writePrivilege;
  RoleType::type readPrivilege;

  _OperationSuit__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_groups(const std::vector<OperationGroup> & val);

  void __set_params(const std::vector<OperationParam> & val);

  void __set_writePrivilege(const RoleType::type val);

  void __set_readPrivilege(const RoleType::type val);

  bool operator == (const OperationSuit & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(writePrivilege == rhs.writePrivilege))
      return false;
    if (!(readPrivilege == rhs.readPrivilege))
      return false;
    return true;
  }
  bool operator != (const OperationSuit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationSuit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OperationSuit &a, OperationSuit &b);

inline std::ostream& operator<<(std::ostream& out, const OperationSuit& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _OperationGroup__isset {
  _OperationGroup__isset() : name(false), text(false), operations(false) {}
  bool name :1;
  bool text :1;
  bool operations :1;
} _OperationGroup__isset;

class OperationGroup : public virtual ::apache::thrift::TBase {
 public:

  OperationGroup(const OperationGroup&);
  OperationGroup& operator=(const OperationGroup&);
  OperationGroup() : name(), text() {
  }

  virtual ~OperationGroup() throw();
  std::string name;
  std::string text;
  std::vector<OperationItem>  operations;

  _OperationGroup__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_operations(const std::vector<OperationItem> & val);

  bool operator == (const OperationGroup & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(operations == rhs.operations))
      return false;
    return true;
  }
  bool operator != (const OperationGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OperationGroup &a, OperationGroup &b);

inline std::ostream& operator<<(std::ostream& out, const OperationGroup& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _OperationItem__isset {
  _OperationItem__isset() : name(false), text(false), params(false), writePrivilege(false), readPrivilege(false) {}
  bool name :1;
  bool text :1;
  bool params :1;
  bool writePrivilege :1;
  bool readPrivilege :1;
} _OperationItem__isset;

class OperationItem : public virtual ::apache::thrift::TBase {
 public:

  OperationItem(const OperationItem&);
  OperationItem& operator=(const OperationItem&);
  OperationItem() : name(), text(), writePrivilege((RoleType::type)0), readPrivilege((RoleType::type)0) {
  }

  virtual ~OperationItem() throw();
  std::string name;
  std::string text;
  std::vector<std::string>  params;
  RoleType::type writePrivilege;
  RoleType::type readPrivilege;

  _OperationItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_params(const std::vector<std::string> & val);

  void __set_writePrivilege(const RoleType::type val);

  void __set_readPrivilege(const RoleType::type val);

  bool operator == (const OperationItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(writePrivilege == rhs.writePrivilege))
      return false;
    if (!(readPrivilege == rhs.readPrivilege))
      return false;
    return true;
  }
  bool operator != (const OperationItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OperationItem &a, OperationItem &b);

inline std::ostream& operator<<(std::ostream& out, const OperationItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _OperationParam__isset {
  _OperationParam__isset() : name(false), text(false), type(false), unit(false), options(false) {}
  bool name :1;
  bool text :1;
  bool type :1;
  bool unit :1;
  bool options :1;
} _OperationParam__isset;

class OperationParam : public virtual ::apache::thrift::TBase {
 public:

  OperationParam(const OperationParam&);
  OperationParam& operator=(const OperationParam&);
  OperationParam() : name(), text(), type((DataType::type)0), unit() {
  }

  virtual ~OperationParam() throw();
  std::string name;
  std::string text;
  DataType::type type;
  std::string unit;
  std::vector<std::string>  options;

  _OperationParam__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_type(const DataType::type val);

  void __set_unit(const std::string& val);

  void __set_options(const std::vector<std::string> & val);

  bool operator == (const OperationParam & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const OperationParam &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationParam & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OperationParam &a, OperationParam &b);

inline std::ostream& operator<<(std::ostream& out, const OperationParam& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DiagnosisSuit__isset {
  _DiagnosisSuit__isset() : name(false), text(false), groups(false), writePrivilege(false), readPrivilege(false) {}
  bool name :1;
  bool text :1;
  bool groups :1;
  bool writePrivilege :1;
  bool readPrivilege :1;
} _DiagnosisSuit__isset;

class DiagnosisSuit : public virtual ::apache::thrift::TBase {
 public:

  DiagnosisSuit(const DiagnosisSuit&);
  DiagnosisSuit& operator=(const DiagnosisSuit&);
  DiagnosisSuit() : name(), text(), writePrivilege((RoleType::type)0), readPrivilege((RoleType::type)0) {
  }

  virtual ~DiagnosisSuit() throw();
  std::string name;
  std::string text;
  std::vector<DiagnosisGroup>  groups;
  RoleType::type writePrivilege;
  RoleType::type readPrivilege;

  _DiagnosisSuit__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_groups(const std::vector<DiagnosisGroup> & val);

  void __set_writePrivilege(const RoleType::type val);

  void __set_readPrivilege(const RoleType::type val);

  bool operator == (const DiagnosisSuit & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(writePrivilege == rhs.writePrivilege))
      return false;
    if (!(readPrivilege == rhs.readPrivilege))
      return false;
    return true;
  }
  bool operator != (const DiagnosisSuit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosisSuit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DiagnosisSuit &a, DiagnosisSuit &b);

inline std::ostream& operator<<(std::ostream& out, const DiagnosisSuit& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DiagnosisGroup__isset {
  _DiagnosisGroup__isset() : name(false), text(false), diagnoses(false) {}
  bool name :1;
  bool text :1;
  bool diagnoses :1;
} _DiagnosisGroup__isset;

class DiagnosisGroup : public virtual ::apache::thrift::TBase {
 public:

  DiagnosisGroup(const DiagnosisGroup&);
  DiagnosisGroup& operator=(const DiagnosisGroup&);
  DiagnosisGroup() : name(), text() {
  }

  virtual ~DiagnosisGroup() throw();
  std::string name;
  std::string text;
  std::vector<DiagnosisItem>  diagnoses;

  _DiagnosisGroup__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_diagnoses(const std::vector<DiagnosisItem> & val);

  bool operator == (const DiagnosisGroup & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(diagnoses == rhs.diagnoses))
      return false;
    return true;
  }
  bool operator != (const DiagnosisGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosisGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DiagnosisGroup &a, DiagnosisGroup &b);

inline std::ostream& operator<<(std::ostream& out, const DiagnosisGroup& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DiagnosisItem__isset {
  _DiagnosisItem__isset() : name(false), text(false), writePrivilege(false), readPrivilege(false) {}
  bool name :1;
  bool text :1;
  bool writePrivilege :1;
  bool readPrivilege :1;
} _DiagnosisItem__isset;

class DiagnosisItem : public virtual ::apache::thrift::TBase {
 public:

  DiagnosisItem(const DiagnosisItem&);
  DiagnosisItem& operator=(const DiagnosisItem&);
  DiagnosisItem() : name(), text(), writePrivilege((RoleType::type)0), readPrivilege((RoleType::type)0) {
  }

  virtual ~DiagnosisItem() throw();
  std::string name;
  std::string text;
  RoleType::type writePrivilege;
  RoleType::type readPrivilege;

  _DiagnosisItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_text(const std::string& val);

  void __set_writePrivilege(const RoleType::type val);

  void __set_readPrivilege(const RoleType::type val);

  bool operator == (const DiagnosisItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(writePrivilege == rhs.writePrivilege))
      return false;
    if (!(readPrivilege == rhs.readPrivilege))
      return false;
    return true;
  }
  bool operator != (const DiagnosisItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosisItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DiagnosisItem &a, DiagnosisItem &b);

inline std::ostream& operator<<(std::ostream& out, const DiagnosisItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DiagnosisResult__isset {
  _DiagnosisResult__isset() : suit(false), name(false), result(false) {}
  bool suit :1;
  bool name :1;
  bool result :1;
} _DiagnosisResult__isset;

class DiagnosisResult : public virtual ::apache::thrift::TBase {
 public:

  DiagnosisResult(const DiagnosisResult&);
  DiagnosisResult& operator=(const DiagnosisResult&);
  DiagnosisResult() : suit(), name(), result() {
  }

  virtual ~DiagnosisResult() throw();
  std::string suit;
  std::string name;
  std::string result;

  _DiagnosisResult__isset __isset;

  void __set_suit(const std::string& val);

  void __set_name(const std::string& val);

  void __set_result(const std::string& val);

  bool operator == (const DiagnosisResult & rhs) const
  {
    if (!(suit == rhs.suit))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const DiagnosisResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosisResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DiagnosisResult &a, DiagnosisResult &b);

inline std::ostream& operator<<(std::ostream& out, const DiagnosisResult& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
