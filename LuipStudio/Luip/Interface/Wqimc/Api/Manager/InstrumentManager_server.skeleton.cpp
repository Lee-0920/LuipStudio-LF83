// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "InstrumentManager.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Interface::Wqimc::Api::Manager;

class InstrumentManagerHandler : virtual public InstrumentManagerIf {
 public:
  InstrumentManagerHandler() {
    // Your initialization goes here
  }

  void echo(std::string& _return, const std::string& data) {
    // Your implementation goes here
    printf("echo\n");
  }

  bool authenticate(const std::string& code) {
    // Your implementation goes here
    printf("authenticate\n");
  }

  int64_t getSystemTime() {
    // Your implementation goes here
    printf("getSystemTime\n");
  }

  bool upload(const Instrument& instrument) {
    // Your implementation goes here
    printf("upload\n");
  }

  bool uploadInstrumentPermissionLevel(const int32_t level) {
    // Your implementation goes here
    printf("uploadInstrumentPermissionLevel\n");
  }

  bool alarm(const Alarm& alarm) {
    // Your implementation goes here
    printf("alarm\n");
  }

  bool updateStatus(const Status& status) {
    // Your implementation goes here
    printf("updateStatus\n");
  }

  bool updateAction(const Status& action) {
    // Your implementation goes here
    printf("updateAction\n");
  }

  bool uploadMeasureData(const MeasureData& data) {
    // Your implementation goes here
    printf("uploadMeasureData\n");
  }

  bool uploadMeasureCurve(const MeasureCurve& curve) {
    // Your implementation goes here
    printf("uploadMeasureCurve\n");
  }

  bool uploadSettingProfiles(const std::vector<Profile> & profilesList) {
    // Your implementation goes here
    printf("uploadSettingProfiles\n");
  }

  bool updateConfigs(const std::vector<Config> & config) {
    // Your implementation goes here
    printf("updateConfigs\n");
  }

  bool uploadReagentProfile(const std::vector<ReagentConfigItem> & configs) {
    // Your implementation goes here
    printf("uploadReagentProfile\n");
  }

  bool uploadConsumableProfile(const std::vector<ConsumableConfigItem> & configs) {
    // Your implementation goes here
    printf("uploadConsumableProfile\n");
  }

  bool updateReagentRemain(const std::vector<ReagentRemain> & remains) {
    // Your implementation goes here
    printf("updateReagentRemain\n");
  }

  bool uploadSignalProfile(const Profile& profile) {
    // Your implementation goes here
    printf("uploadSignalProfile\n");
  }

  bool updateSignals(const std::vector<Signal> & signalList) {
    // Your implementation goes here
    printf("updateSignals\n");
  }

  bool uploadOperations(const std::vector<OperationSuit> & ops) {
    // Your implementation goes here
    printf("uploadOperations\n");
  }

  bool uploadDiagnoses(const std::vector<DiagnosisSuit> & ops) {
    // Your implementation goes here
    printf("uploadDiagnoses\n");
  }

  bool notifyDiagnosisResult(const DiagnosisResult& result) {
    // Your implementation goes here
    printf("notifyDiagnosisResult\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<InstrumentManagerHandler> handler(new InstrumentManagerHandler());
  shared_ptr<TProcessor> processor(new InstrumentManagerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

